<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>G-SS-Hacker</title>
  
  <subtitle>---A Cyber Driver---</subtitle>
  <link href="/G-SS-Hacker.github.io/atom.xml" rel="self"/>
  
  <link href="https://g-ss-hacker.github.io/"/>
  <updated>2020-02-20T16:14:16.237Z</updated>
  <id>https://g-ss-hacker.github.io/</id>
  
  <author>
    <name>G-SS-Hacker</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C语言实现选择、插入、冒泡排序算法</title>
    <link href="https://g-ss-hacker.github.io/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E9%80%89%E6%8B%A9%E3%80%81%E6%8F%92%E5%85%A5%E3%80%81%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>https://g-ss-hacker.github.io/C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%E9%80%89%E6%8B%A9%E3%80%81%E6%8F%92%E5%85%A5%E3%80%81%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2020-02-20T16:13:33.000Z</published>
    <updated>2020-02-20T16:14:16.237Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/02/20/1iuFyc5DLe6GbHs.jpg" alt></p><h1 id="C语言实现选择、插入、冒泡排序算法"><a href="#C语言实现选择、插入、冒泡排序算法" class="headerlink" title="C语言实现选择、插入、冒泡排序算法"></a>C语言实现选择、插入、冒泡排序算法</h1><blockquote><p>图：挂载“匕首”导弹的米格31</p></blockquote><p><font color="grey"> <em>Guderian</em>出品 </font></p><p><del>完整代码在最下面</del></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">void</span>(*f)(<span class="keyword">int</span> *))</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectionSort</span><span class="params">(<span class="keyword">int</span> arr[])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertionSort</span><span class="params">(<span class="keyword">int</span> arr[])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> arr[])</span></span>;</span><br></pre></td></tr></table></figure><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[N] = &#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">7</span>&#125;;</span><br><span class="line">Sort(a, InsertionSort);<span class="comment">//此处选择排序算法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现两数交换函数"><a href="#实现两数交换函数" class="headerlink" title="实现两数交换函数"></a>实现两数交换函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = *x;</span><br><span class="line">*x = *y;</span><br><span class="line">*y = tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现选择排序函数"><a href="#实现选择排序函数" class="headerlink" title="实现选择排序函数"></a>实现选择排序函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectionSort</span><span class="params">(<span class="keyword">int</span> arr[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N<span class="number">-1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> min = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; N; j++)</span><br><span class="line"><span class="keyword">if</span> (arr[j] &lt; arr[min])</span><br><span class="line">min = j;</span><br><span class="line">swap(&amp;arr[i], &amp;arr[min]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="实现插入排序函数"><a href="#实现插入排序函数" class="headerlink" title="实现插入排序函数"></a>实现插入排序函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertionSort</span><span class="params">(<span class="keyword">int</span> arr[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = i<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> key = arr[i];</span><br><span class="line"><span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt;= key)</span><br><span class="line">&#123;</span><br><span class="line">arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">arr[j+<span class="number">1</span>] = key;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现冒泡排序函数"><a href="#实现冒泡排序函数" class="headerlink" title="实现冒泡排序函数"></a>实现冒泡排序函数</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> arr[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, exchange = <span class="number">1</span>; exchange &amp;&amp; i &lt; N<span class="number">-1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">exchange = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N<span class="number">-1</span>-i; j++)</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">swap(&amp;arr[j], &amp;arr[j+<span class="number">1</span>]);</span><br><span class="line">exchange = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p><del>客官久等了</del></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">void</span>(*f)(<span class="keyword">int</span> *))</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectionSort</span><span class="params">(<span class="keyword">int</span> arr[])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertionSort</span><span class="params">(<span class="keyword">int</span> arr[])</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> arr[])</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[N] = &#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">7</span>&#125;;</span><br><span class="line">Sort(a, InsertionSort);<span class="comment">//此处选择排序算法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = *x;</span><br><span class="line">*x = *y;</span><br><span class="line">*y = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">void</span>(*f)(<span class="keyword">int</span> *))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">(*f)(arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectionSort</span><span class="params">(<span class="keyword">int</span> arr[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N<span class="number">-1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> min = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; N; j++)</span><br><span class="line"><span class="keyword">if</span> (arr[j] &lt; arr[min])</span><br><span class="line">min = j;</span><br><span class="line">swap(&amp;arr[i], &amp;arr[min]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertionSort</span><span class="params">(<span class="keyword">int</span> arr[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> j = i<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> key = arr[i];</span><br><span class="line"><span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt;= key)</span><br><span class="line">&#123;</span><br><span class="line">arr[j+<span class="number">1</span>] = arr[j];</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line">arr[j+<span class="number">1</span>] = key;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> arr[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, exchange = <span class="number">1</span>; exchange &amp;&amp; i &lt; N<span class="number">-1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">exchange = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N<span class="number">-1</span>-i; j++)</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">swap(&amp;arr[j], &amp;arr[j+<span class="number">1</span>]);</span><br><span class="line">exchange = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><font color="#407600">【更多C语言系列】</font><ul><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/C和C-基本数据类型取值范围/">C &amp; C++基本数据类型取值范围</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/C和C-中memset用法/">C &amp; C++ memset</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/野指针的产生及其危害/">野指针的产生及其危害</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/02/20/1iuFyc5DLe6GbHs.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;C语言实现选择、插入、冒泡排序算法&quot;&gt;&lt;a href=&quot;#C语言实现选择、插入、冒泡排序算法&quot; class=&quot;headerlink&quot; title=&quot;C语言实现选择、插入、冒泡排序算法&quot;&gt;&lt;/a&gt;C语言实现选择、插入、冒泡排序算法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;图：挂载“匕首”导弹的米格31&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;font color=&quot;grey&quot;&gt; &lt;em&gt;Guderian&lt;/em&gt;出品 &lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;del&gt;完整代码在最下面&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; N = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *x, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *y)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Sort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arr[], &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;(*f)(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *))&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SelectionSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arr[])&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;InsertionSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arr[])&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BubbleSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arr[])&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;主函数&quot;&gt;&lt;a href=&quot;#主函数&quot; class=&quot;headerlink&quot; title=&quot;主函数&quot;&gt;&lt;/a&gt;主函数&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a[N] = &amp;#123;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Sort(a, InsertionSort);	&lt;span class=&quot;comment&quot;&gt;//此处选择排序算法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; N; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d &quot;&lt;/span&gt;, a[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;实现两数交换函数&quot;&gt;&lt;a href=&quot;#实现两数交换函数&quot; class=&quot;headerlink&quot; title=&quot;实现两数交换函数&quot;&gt;&lt;/a&gt;实现两数交换函数&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *x, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *y)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; tmp = *x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	*x = *y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	*y = tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;实现选择排序函数&quot;&gt;&lt;a href=&quot;#实现选择排序函数&quot; class=&quot;headerlink&quot; title=&quot;实现选择排序函数&quot;&gt;&lt;/a&gt;实现选择排序函数&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SelectionSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arr[])&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; N&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; min = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j &amp;lt; N; j++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (arr[j] &amp;lt; arr[min])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				min = j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		swap(&amp;amp;arr[i], &amp;amp;arr[min]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="总结" scheme="https://G-SS-Hacker.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="C" scheme="https://G-SS-Hacker.github.io/tags/C/"/>
    
      <category term="排序" scheme="https://G-SS-Hacker.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="算法" scheme="https://G-SS-Hacker.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>C和C++中memcpy用法</title>
    <link href="https://g-ss-hacker.github.io/C%E5%92%8CC-%E4%B8%ADmemcpy%E7%94%A8%E6%B3%95/"/>
    <id>https://g-ss-hacker.github.io/C%E5%92%8CC-%E4%B8%ADmemcpy%E7%94%A8%E6%B3%95/</id>
    <published>2020-02-20T02:29:22.000Z</published>
    <updated>2020-02-20T02:47:11.535Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.ax1x.com/2020/02/20/3ZdZvT.jpg" alt></p><h1 id="C和C-中memcpy-函数"><a href="#C和C-中memcpy-函数" class="headerlink" title="C和C++中memcpy()函数"></a>C和C++中memcpy()函数</h1><blockquote><p>图：中国空军苏35SK战斗机</p></blockquote><p></p><p><font color="grey"> <em>Guderian</em>出品 </font></p><p></p><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><ul><li>C：      <code>&lt;string.h&gt;</code></li><li>C++：  <code>&lt;cstring&gt;</code></li></ul><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p><code>void *memcpy(void *str1, const void *str2, size_t n)</code></p><p>此处<code>size_t</code>变量类型等价于<code>long unsigned int</code>即无符号长整型，在32位机器上为32位，在64位机器为中64位。</p><p>注：32位机器指CPU通用寄存器的数据宽度为32位，也就是说CPU一次可以运行32bit数据</p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>从内存 <strong>str2</strong> 复制 <strong>n</strong> 个字符到内存 <strong>str1</strong></p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ul><li><code>str1</code> ——指向存储复制内容的目标数组。</li><li><code>str2</code> ——指向复制目标数组。</li><li><code>n</code>——要被复制的字节数。</li></ul><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>返回一个指向存储区<code>str1</code>的指针。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">50</span>] = <span class="string">"the quick brown fox jumps over the lazy dog"</span>;</span><br><span class="line"><span class="keyword">char</span> t[<span class="number">50</span>];</span><br><span class="line"> </span><br><span class="line"><span class="built_in">memcpy</span>(t, s, <span class="keyword">sizeof</span>(s));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, t);</span><br><span class="line">   </span><br><span class="line"><span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">the quick brown fox jumps over the lazy dog</span><br></pre></td></tr></table></figure><a id="more"></a><hr><font color="#407600">【更多C语言系列】</font><ul><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/C和C-基本数据类型取值范围/">C &amp; C++基本数据类型取值范围</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/C和C-中memset用法/">C &amp; C++ memset</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/野指针的产生及其危害/">野指针的产生及其危害</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/20/3ZdZvT.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;C和C-中memcpy-函数&quot;&gt;&lt;a href=&quot;#C和C-中memcpy-函数&quot; class=&quot;headerlink&quot; title=&quot;C和C++中memcpy()函数&quot;&gt;&lt;/a&gt;C和C++中memcpy()函数&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;图：中国空军苏35SK战斗机&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;grey&quot;&gt; &lt;em&gt;Guderian&lt;/em&gt;出品 &lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;头文件&quot;&gt;&lt;a href=&quot;#头文件&quot; class=&quot;headerlink&quot; title=&quot;头文件&quot;&gt;&lt;/a&gt;头文件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;C：      &lt;code&gt;&amp;lt;string.h&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C++：  &lt;code&gt;&amp;lt;cstring&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;声明&quot;&gt;&lt;a href=&quot;#声明&quot; class=&quot;headerlink&quot; title=&quot;声明&quot;&gt;&lt;/a&gt;声明&lt;/h2&gt;&lt;p&gt;&lt;code&gt;void *memcpy(void *str1, const void *str2, size_t n)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;此处&lt;code&gt;size_t&lt;/code&gt;变量类型等价于&lt;code&gt;long unsigned int&lt;/code&gt;即无符号长整型，在32位机器上为32位，在64位机器为中64位。&lt;/p&gt;
&lt;p&gt;注：32位机器指CPU通用寄存器的数据宽度为32位，也就是说CPU一次可以运行32bit数据&lt;/p&gt;
&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;从内存 &lt;strong&gt;str2&lt;/strong&gt; 复制 &lt;strong&gt;n&lt;/strong&gt; 个字符到内存 &lt;strong&gt;str1&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;参数&quot;&gt;&lt;a href=&quot;#参数&quot; class=&quot;headerlink&quot; title=&quot;参数&quot;&gt;&lt;/a&gt;参数&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;str1&lt;/code&gt; ——指向存储复制内容的目标数组。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str2&lt;/code&gt; ——指向复制目标数组。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt;——要被复制的字节数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;返回值&quot;&gt;&lt;a href=&quot;#返回值&quot; class=&quot;headerlink&quot; title=&quot;返回值&quot;&gt;&lt;/a&gt;返回值&lt;/h2&gt;&lt;p&gt;返回一个指向存储区&lt;code&gt;str1&lt;/code&gt;的指针。&lt;/p&gt;
&lt;h2 id=&quot;实例&quot;&gt;&lt;a href=&quot;#实例&quot; class=&quot;headerlink&quot; title=&quot;实例&quot;&gt;&lt;/a&gt;实例&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; s[&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;] = &lt;span class=&quot;string&quot;&gt;&quot;the quick brown fox jumps over the lazy dog&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; t[&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;memcpy&lt;/span&gt;(t, s, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(s));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%s\n&quot;&lt;/span&gt;, t);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;the quick brown fox jumps over the lazy dog&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="总结" scheme="https://G-SS-Hacker.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="C-plus-plus" scheme="https://G-SS-Hacker.github.io/tags/C-plus-plus/"/>
    
      <category term="C" scheme="https://G-SS-Hacker.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言基础学习笔记（8）：向函数传递数组</title>
    <link href="https://g-ss-hacker.github.io/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%888%EF%BC%89%EF%BC%9A%E5%90%91%E5%87%BD%E6%95%B0%E4%BC%A0%E9%80%92%E6%95%B0%E7%BB%84/"/>
    <id>https://g-ss-hacker.github.io/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%888%EF%BC%89%EF%BC%9A%E5%90%91%E5%87%BD%E6%95%B0%E4%BC%A0%E9%80%92%E6%95%B0%E7%BB%84/</id>
    <published>2020-02-19T07:20:28.000Z</published>
    <updated>2020-02-20T10:10:50.923Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.ax1x.com/2020/02/19/3E0vCt.jpg" alt></p><h1 id="C语言基础学习笔记（8）：向函数传递数组"><a href="#C语言基础学习笔记（8）：向函数传递数组" class="headerlink" title="C语言基础学习笔记（8）：向函数传递数组"></a>C语言基础学习笔记（8）：向函数传递数组</h1><blockquote><p>图：达拉斯（Dallas）</p></blockquote><p></p><p><font color="grey"> <em>Guderian</em>出品 </font></p><p></p><ol><li><p><code>C</code>语言中不允许用变量来定义数组的长度。</p></li><li><p>一维数组在内存中占用的字节数 = 数组长度 x <code>sizeof（基类型）</code>。</p></li><li><p>向函数传递<strong>一维数组</strong>，所传递的是数组的地址。因此，在函数中对形参进行修改，会使原来传入的数组发生变化。在调用函数时，应该使用不带下标的数组名作为函数实参（数组名就相当于数组的首地址）。</p><p>如：<code>int func(int a[], int n);</code></p><p>注：通常不指定数组的长度，用另一个形参来制定数组的大小。</p></li><li><p>向函数传递<strong>二维数组</strong>，在声明函数的二维数组形参时，不能省略数组第二维的长度，必须知道列数才能正确计算<code>a[i][j]</code>在数组中相对于第一个元素的偏移位置。</p><p>如：<code>int func(int a[][M], int n);</code></p><p>注：数组第二维的长度不可省略。</p></li><li><p>向函数传递一维数组示例：快速排序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[N] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">7</span>&#125;;</span><br><span class="line">QuickSort(a, <span class="number">0</span>, N);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *x, <span class="keyword">int</span> *y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tmp = *x;</span><br><span class="line">*x = *y;</span><br><span class="line">*y = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (low &gt;= high)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mid = arr[high];</span><br><span class="line"><span class="keyword">int</span> left = low, right = high - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(left &lt; right)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(arr[left] &lt; mid &amp;&amp; left &lt; right)</span><br><span class="line">left++;</span><br><span class="line"><span class="keyword">while</span>(arr[right] &gt;= mid &amp;&amp; left &lt; right)</span><br><span class="line">right--;</span><br><span class="line">swap(&amp;arr[left], &amp;arr[right]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">left += (arr[left] &lt; arr[high]);</span><br><span class="line">swap(&amp;arr[left], &amp;arr[high]);</span><br><span class="line"></span><br><span class="line">QuickSort(arr, low, left<span class="number">-1</span>);</span><br><span class="line">QuickSort(arr, left+<span class="number">1</span>, high);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 1 2 3 4 5 6 7 8 9</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><hr><font color="#407600">【更多C语言系列】</font><ul><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/C和C-基本数据类型取值范围/">C &amp; C++基本数据类型取值范围</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/C和C-中memset用法/">C &amp; C++ memset</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/野指针的产生及其危害/">野指针的产生及其危害</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/19/3E0vCt.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;C语言基础学习笔记（8）：向函数传递数组&quot;&gt;&lt;a href=&quot;#C语言基础学习笔记（8）：向函数传递数组&quot; class=&quot;headerlink&quot; title=&quot;C语言基础学习笔记（8）：向函数传递数组&quot;&gt;&lt;/a&gt;C语言基础学习笔记（8）：向函数传递数组&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;图：达拉斯（Dallas）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;grey&quot;&gt; &lt;em&gt;Guderian&lt;/em&gt;出品 &lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;C&lt;/code&gt;语言中不允许用变量来定义数组的长度。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一维数组在内存中占用的字节数 = 数组长度 x &lt;code&gt;sizeof（基类型）&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;向函数传递&lt;strong&gt;一维数组&lt;/strong&gt;，所传递的是数组的地址。因此，在函数中对形参进行修改，会使原来传入的数组发生变化。在调用函数时，应该使用不带下标的数组名作为函数实参（数组名就相当于数组的首地址）。&lt;/p&gt;
&lt;p&gt;如：&lt;code&gt;int func(int a[], int n);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注：通常不指定数组的长度，用另一个形参来制定数组的大小。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;向函数传递&lt;strong&gt;二维数组&lt;/strong&gt;，在声明函数的二维数组形参时，不能省略数组第二维的长度，必须知道列数才能正确计算&lt;code&gt;a[i][j]&lt;/code&gt;在数组中相对于第一个元素的偏移位置。&lt;/p&gt;
&lt;p&gt;如：&lt;code&gt;int func(int a[][M], int n);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注：数组第二维的长度不可省略。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;向函数传递一维数组示例：快速排序&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; N = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *x, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *y)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;QuickSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arr[], &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; low, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; high)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a[N] = &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	QuickSort(a, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, N);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; N; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d &quot;&lt;/span&gt;, a[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *x, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *y)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; tmp = *x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	*x = *y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	*y = tmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;QuickSort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; arr[], &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; low, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; high)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (low &amp;gt;= high)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; mid = arr[high];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; left = low, right = high - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(left &amp;lt; right)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(arr[left] &amp;lt; mid &amp;amp;&amp;amp; left &amp;lt; right)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			left++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(arr[right] &amp;gt;= mid &amp;amp;&amp;amp; left &amp;lt; right)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			right--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		swap(&amp;amp;arr[left], &amp;amp;arr[right]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	left += (arr[left] &amp;lt; arr[high]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	swap(&amp;amp;arr[left], &amp;amp;arr[high]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	QuickSort(arr, low, left&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	QuickSort(arr, left+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, high);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出结果为：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0 1 2 3 4 5 6 7 8 9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="总结" scheme="https://G-SS-Hacker.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="C" scheme="https://G-SS-Hacker.github.io/tags/C/"/>
    
      <category term="排序" scheme="https://G-SS-Hacker.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="算法" scheme="https://G-SS-Hacker.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>C语言基础学习笔记（7）：变量的存储类型</title>
    <link href="https://g-ss-hacker.github.io/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%887%EF%BC%89%EF%BC%9A%E5%8F%98%E9%87%8F%E7%9A%84%E5%AD%98%E5%82%A8%E7%B1%BB%E5%9E%8B/"/>
    <id>https://g-ss-hacker.github.io/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%887%EF%BC%89%EF%BC%9A%E5%8F%98%E9%87%8F%E7%9A%84%E5%AD%98%E5%82%A8%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-02-18T06:05:44.000Z</published>
    <updated>2020-02-19T07:21:29.276Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.ax1x.com/2020/02/18/3FrPVs.jpg" alt></p><h1 id="C语言基础学习笔记（7）：变量的存储类型"><a href="#C语言基础学习笔记（7）：变量的存储类型" class="headerlink" title="C语言基础学习笔记（7）：变量的存储类型"></a>C语言基础学习笔记（7）：变量的存储类型</h1><blockquote><p>图：米格29飞行表演，释放红外干扰弹</p></blockquote><p></p><p><font color="grey"> <em>Guderian</em>出品 </font></p><p></p><h2 id="什么是变量的存储类型"><a href="#什么是变量的存储类型" class="headerlink" title="什么是变量的存储类型"></a>什么是变量的存储类型</h2><p><strong>变量的存储类型</strong>：即编译器为变量分配内存的方式，决定了变量的<strong>生存期（Lifetime）</strong>。在静态存储区中分配内存的变量生存期是整个程序，全程占据内存；在动态存储区中分配内存的变量生存期是定义它的语句块。声明的方法是：<code>存储类型 数据类型 变量名;</code>。</p><h2 id="编译器如何给变量分配内存"><a href="#编译器如何给变量分配内存" class="headerlink" title="编译器如何给变量分配内存"></a>编译器如何给变量分配内存</h2><p>编译器通过将变量名映射到不同的内存地址来实现作用域的划分，如<strong>全局变量</strong>位于<code>RAM</code>中的<strong>静态存储区</strong>，<strong>局部变量</strong>位于<code>RAM</code>中的<strong>动态存储区</strong>。</p><p><img src="https://i.loli.net/2020/02/17/OG7vRc3uqwxijb9.jpg" alt></p><p><strong>（1）只读存储区</strong></p><ul><li>存放机器代码和常量等只读数据</li></ul><p><strong>（2）静态存储区</strong></p><ul><li>存放全局变量和静态变量等</li><li>静态——发生在程序编译或链接时</li></ul><p><strong>（3）动态存储区</strong></p><ul><li>包括堆和栈。其中栈用于保存函数调用时的返回地址、形参、局部变量等</li><li>动态——发生在程序载入和运行时</li></ul><a id="more"></a><h2 id="变量的四种存储类型"><a href="#变量的四种存储类型" class="headerlink" title="变量的四种存储类型"></a>变量的四种存储类型</h2><h3 id="auto（自动变量）"><a href="#auto（自动变量）" class="headerlink" title="auto（自动变量）"></a>auto（自动变量）</h3><p><code>auto</code>型变量属于动态存储类型变量，系统调用函数时临时分配内存空间，函数执行结束就释放。大多数情况下定义自动变量时可以省略<code>auto</code>，定义一个没有声明存储类型的变量，系统会缺省地认为这是一个自动变量。如：</p><p><code>int a</code>$\Longleftrightarrow$<code>auto int a</code></p><h3 id="static（静态变量）"><a href="#static（静态变量）" class="headerlink" title="static（静态变量）"></a>static（静态变量）</h3><p>从程序运行区占据内存，程序退出时释放内存。包括<strong>静态局部变量</strong>和<strong>静态全局变量</strong>。<code>static</code>变量的使用会损害程序的可读性，因此在能够满足算法功能的前提下尽量少用。</p><h4 id="静态局部变量"><a href="#静态局部变量" class="headerlink" title="静态局部变量"></a>静态局部变量</h4><p>静态局部变量在函数执行结束时内存不被释放,函数下次执行变量的值不改变。如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> foo)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, func(<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> foo)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> bar = foo;<span class="comment">//第一次执行函数后bar被赋初值</span></span><br><span class="line">    <span class="keyword">return</span> ++bar;<span class="comment">//第二次执行函数开始bar不会再被赋值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h4 id="静态全局变量"><a href="#静态全局变量" class="headerlink" title="静态全局变量"></a>静态全局变量</h4><p><code>C</code>语言编程涉及多文件结构时，每一个<code>.c</code>程序中的全局变量都可以被其他程序所调用。然而不同<code>.c</code>程序中的全局变量有可能重名，在调用同名全局变量时会导致错误的产生。因此，在使用全局变量时，为了保证该全局变量只能在本程序文件中被调用，可以把该全局变量声明为<code>static</code>类型。尽管如此，为了降低程序的耦合性，提高内聚程度，还是应该尽量减少全局变量的使用。</p><h3 id="register（寄存器变量）"><a href="#register（寄存器变量）" class="headerlink" title="register（寄存器变量）"></a>register（寄存器变量）</h3><p>相当于把一个<code>auto</code>类型的变量放入了<code>CPU</code>的寄存器中（而非内存中）。这么做的好处是读写该变量的速度大大加快（如控制循环语句的<code>i</code>,<code>j</code>.<code>k</code>等需要频繁读写的变量），但是众所周知<code>CPU</code>的寄存器空间很小，不能把大量变量放入<code>CPU</code>的寄存器中。</p><p>事实上，现代编译器会自动对我们写的代码进行优化，自动把需要提高读写速度的变量放入<code>CPU</code>寄存器中，无需我们手动声明。总之，没必要过于强调其作用。</p><h3 id="extern（外部变量）"><a href="#extern（外部变量）" class="headerlink" title="extern（外部变量）"></a>extern（外部变量）</h3><p>如果我们想在全局变量的定义点前或在其他文件中访问这个变量，就要用到<code>extern</code>类型变量。<code>extern</code>变量的使用会损害程序的可读性，因此在能够满足算法功能的前提下尽量少用。</p><h4 id="在全局变量的定义点前访问变量"><a href="#在全局变量的定义点前访问变量" class="headerlink" title="在全局变量的定义点前访问变量"></a>在全局变量的定义点前访问变量</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> a;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在其他文件中访问本文件的全局变量"><a href="#在其他文件中访问本文件的全局变量" class="headerlink" title="在其他文件中访问本文件的全局变量"></a>在其他文件中访问本文件的全局变量</h4><h5 id="正确但不规范做法"><a href="#正确但不规范做法" class="headerlink" title="正确但不规范做法"></a>正确但不规范做法</h5><p>在同一个工程项目中，有两个文件<code>main.c</code>和<code>a.c</code>。<code>main.c</code>想要访问<code>main.c</code>中的<code>a</code>变量：</p><p><code>main.c</code>文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> a;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>a.c</code>文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h5 id="正确且规范做法"><a href="#正确且规范做法" class="headerlink" title="正确且规范做法"></a>正确且规范做法</h5><p>在同一个工程项目中，有三个文件<code>main.c</code>、<code>a.h</code>和<code>a.c</code>。<code>main.c</code>想要访问<code>main.c</code>中的<code>a</code>变量：</p><p><code>main.c</code>文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"a.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>a.h</code>文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> a;</span><br></pre></td></tr></table></figure><p><code>a.c</code>文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"a.h"</span></span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><hr><font color="#407600">【更多C语言系列】</font><ul><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/C和C-基本数据类型取值范围/">C &amp; C++基本数据类型取值范围</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/C和C-中memset用法/">C &amp; C++ memset</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/野指针的产生及其危害/">野指针的产生及其危害</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/18/3FrPVs.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;C语言基础学习笔记（7）：变量的存储类型&quot;&gt;&lt;a href=&quot;#C语言基础学习笔记（7）：变量的存储类型&quot; class=&quot;headerlink&quot; title=&quot;C语言基础学习笔记（7）：变量的存储类型&quot;&gt;&lt;/a&gt;C语言基础学习笔记（7）：变量的存储类型&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;图：米格29飞行表演，释放红外干扰弹&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;grey&quot;&gt; &lt;em&gt;Guderian&lt;/em&gt;出品 &lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;什么是变量的存储类型&quot;&gt;&lt;a href=&quot;#什么是变量的存储类型&quot; class=&quot;headerlink&quot; title=&quot;什么是变量的存储类型&quot;&gt;&lt;/a&gt;什么是变量的存储类型&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;变量的存储类型&lt;/strong&gt;：即编译器为变量分配内存的方式，决定了变量的&lt;strong&gt;生存期（Lifetime）&lt;/strong&gt;。在静态存储区中分配内存的变量生存期是整个程序，全程占据内存；在动态存储区中分配内存的变量生存期是定义它的语句块。声明的方法是：&lt;code&gt;存储类型 数据类型 变量名;&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;编译器如何给变量分配内存&quot;&gt;&lt;a href=&quot;#编译器如何给变量分配内存&quot; class=&quot;headerlink&quot; title=&quot;编译器如何给变量分配内存&quot;&gt;&lt;/a&gt;编译器如何给变量分配内存&lt;/h2&gt;&lt;p&gt;编译器通过将变量名映射到不同的内存地址来实现作用域的划分，如&lt;strong&gt;全局变量&lt;/strong&gt;位于&lt;code&gt;RAM&lt;/code&gt;中的&lt;strong&gt;静态存储区&lt;/strong&gt;，&lt;strong&gt;局部变量&lt;/strong&gt;位于&lt;code&gt;RAM&lt;/code&gt;中的&lt;strong&gt;动态存储区&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/02/17/OG7vRc3uqwxijb9.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）只读存储区&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存放机器代码和常量等只读数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;（2）静态存储区&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存放全局变量和静态变量等&lt;/li&gt;
&lt;li&gt;静态——发生在程序编译或链接时&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;（3）动态存储区&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包括堆和栈。其中栈用于保存函数调用时的返回地址、形参、局部变量等&lt;/li&gt;
&lt;li&gt;动态——发生在程序载入和运行时&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="总结" scheme="https://G-SS-Hacker.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="C" scheme="https://G-SS-Hacker.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言基础学习笔记（6）：变量作用域、形参与实参</title>
    <link href="https://g-ss-hacker.github.io/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%886%EF%BC%89%EF%BC%9A%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E5%BD%A2%E5%8F%82%E4%B8%8E%E5%AE%9E%E5%8F%82/"/>
    <id>https://g-ss-hacker.github.io/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%886%EF%BC%89%EF%BC%9A%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E5%BD%A2%E5%8F%82%E4%B8%8E%E5%AE%9E%E5%8F%82/</id>
    <published>2020-02-18T03:49:13.000Z</published>
    <updated>2020-02-18T06:06:52.978Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/02/18/zS7nBNk6Up8GuIj.jpg" alt></p><h1 id="C语言基础学习笔记：变量作用域、形参与实参"><a href="#C语言基础学习笔记：变量作用域、形参与实参" class="headerlink" title="C语言基础学习笔记：变量作用域、形参与实参"></a>C语言基础学习笔记：变量作用域、形参与实参</h1><blockquote><p>图：联盟号飞船（Soyuz）</p></blockquote><p></p><p><font color="grey"> <em>Guderian</em>出品 </font></p><p></p><ol><li><p><code>C</code>语言中，作用域较小的局部变量隐藏作用于较大的局部变量。如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">3</span>, b = <span class="number">4</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"a = %d, b = %d\n"</span>, a, b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a = %d, b = %d"</span>, a, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = 3, b = 4</span><br><span class="line">a = 1, b = 2</span><br></pre></td></tr></table></figure></li><li><p><code>C</code>语言中，局部变量隐藏全局变量。形参与全局变量同名不会相互干扰。</p></li><li><p><strong>实参（argument）</strong>：在调用函数时传递给函数的参数，在调用时有确定的值</p><p><strong>形参（parameter）</strong>：在定义函数名和函数体时使用的参数，目的是接收调用该函数时传入的参数。</p></li><li><p>总之，只要同名的变量出现在不同的作用域内二者互不干扰，编译器有能力区分不同作用域中的同名变量。</p></li><li><p>编译器如何区分不同作用域的同名变量呢？编译器没有变量名这个概念，只知道内存地址，通过将同名变量映射到不同的内存地址来实现作用域的划分，如<strong>全局变量</strong>位于<code>RAM</code>中的<strong>静态存储区</strong>，<strong>局部变量</strong>位于<code>RAM</code>中的<strong>动态存储区</strong>。</p><p><img src="https://i.loli.net/2020/02/17/OG7vRc3uqwxijb9.jpg" alt></p><p><strong>（1）只读存储区</strong></p><ul><li>存放机器代码和常量等只读数据</li></ul><p><strong>（2）静态存储区</strong></p><ul><li>存放全局变量和静态变量等</li><li>静态——发生在程序编译或链接时</li></ul><p><strong>（3）动态存储区</strong></p><ul><li>包括堆和栈。其中栈用于保存函数调用时的返回地址、形参、局部变量等</li><li>动态——发生在程序载入和运行时</li></ul></li></ol><a id="more"></a><hr><font color="#407600">【更多C语言系列】</font><ul><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/C和C-基本数据类型取值范围/">C &amp; C++基本数据类型取值范围</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/C和C-中memset用法/">C &amp; C++ memset</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/野指针的产生及其危害/">野指针的产生及其危害</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/02/18/zS7nBNk6Up8GuIj.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;C语言基础学习笔记：变量作用域、形参与实参&quot;&gt;&lt;a href=&quot;#C语言基础学习笔记：变量作用域、形参与实参&quot; class=&quot;headerlink&quot; title=&quot;C语言基础学习笔记：变量作用域、形参与实参&quot;&gt;&lt;/a&gt;C语言基础学习笔记：变量作用域、形参与实参&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;图：联盟号飞船（Soyuz）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;grey&quot;&gt; &lt;em&gt;Guderian&lt;/em&gt;出品 &lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;C&lt;/code&gt;语言中，作用域较小的局部变量隐藏作用于较大的局部变量。如：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, b = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, b = &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;a = %d, b = %d\n&quot;&lt;/span&gt;, a, b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;a = %d, b = %d&quot;&lt;/span&gt;, a, b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出结果为：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;a = 3, b = 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a = 1, b = 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;C&lt;/code&gt;语言中，局部变量隐藏全局变量。形参与全局变量同名不会相互干扰。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;实参（argument）&lt;/strong&gt;：在调用函数时传递给函数的参数，在调用时有确定的值&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;形参（parameter）&lt;/strong&gt;：在定义函数名和函数体时使用的参数，目的是接收调用该函数时传入的参数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;总之，只要同名的变量出现在不同的作用域内二者互不干扰，编译器有能力区分不同作用域中的同名变量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;编译器如何区分不同作用域的同名变量呢？编译器没有变量名这个概念，只知道内存地址，通过将同名变量映射到不同的内存地址来实现作用域的划分，如&lt;strong&gt;全局变量&lt;/strong&gt;位于&lt;code&gt;RAM&lt;/code&gt;中的&lt;strong&gt;静态存储区&lt;/strong&gt;，&lt;strong&gt;局部变量&lt;/strong&gt;位于&lt;code&gt;RAM&lt;/code&gt;中的&lt;strong&gt;动态存储区&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/02/17/OG7vRc3uqwxijb9.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）只读存储区&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存放机器代码和常量等只读数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;（2）静态存储区&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;存放全局变量和静态变量等&lt;/li&gt;
&lt;li&gt;静态——发生在程序编译或链接时&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;（3）动态存储区&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包括堆和栈。其中栈用于保存函数调用时的返回地址、形参、局部变量等&lt;/li&gt;
&lt;li&gt;动态——发生在程序载入和运行时&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="总结" scheme="https://G-SS-Hacker.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="C" scheme="https://G-SS-Hacker.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言基础学习笔记（5）：递归</title>
    <link href="https://g-ss-hacker.github.io/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%885%EF%BC%89%EF%BC%9A%E9%80%92%E5%BD%92/"/>
    <id>https://g-ss-hacker.github.io/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%885%EF%BC%89%EF%BC%9A%E9%80%92%E5%BD%92/</id>
    <published>2020-02-17T07:45:20.000Z</published>
    <updated>2020-02-18T03:49:55.433Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.pixabay.com/photo/2016/12/03/20/08/sukhoi-35-1880484_1280.jpg" alt></p><h1 id="C语言基础学习笔记（5）：递归"><a href="#C语言基础学习笔记（5）：递归" class="headerlink" title="C语言基础学习笔记（5）：递归"></a>C语言基础学习笔记（5）：递归</h1><blockquote><p>图：苏35发射空对空导弹</p></blockquote><p></p><p><font color="grey"> <em>Guderian</em>出品 </font></p><p></p><ol><li><p>把现成的代码拿来使用就称为<strong>复用</strong>，这么做可以大大提高编写效率。</p></li><li><p><code>C</code>语言中的函数可以<strong>嵌套调用</strong>，不能<strong>嵌套定义</strong>。</p></li><li><p><strong>定义.</strong>函数直接或间接调用了自己，称为<strong>递归调用（Recursive Call）</strong>。这样的函数，称为<strong>递归函数（Recursive Function）</strong>。</p></li><li><p><strong>递归函数</strong>包含<strong>基本条件</strong>和<strong>一般条件</strong>。<strong>基本条件</strong>控制递归调用结束，<strong>一般条件</strong>控制递归调用项基本条件转化。如果没有基本条件或者一般条件不能转化为基本条件，此时递归无法结束，变成“无穷递归”。</p></li><li><p>通常下面三种情况需要使用递归：</p><p>（1）<strong>数学定义</strong>是递归的：计算阶乘，最大公约数和斐波那契数列</p><p>（2）<strong>数据结构</strong>时递归的：队列、链表、树和图</p><p>（3）<strong>问题的解法</strong>是递归的：汉诺塔，骑士游历，八皇后问题</p></li><li><p>典型递归问题示例：汉诺塔问题（<a href="https://baike.baidu.com/item/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/1945186?fr=aladdin#1" target="_blank" rel="noopener">题目链接</a>）</p><p>先考虑比较简单的情形：当只有<code>2</code>个圆盘的时候如何解决？</p><p><img src="https://i.loli.net/2020/02/17/cv6dfE7yMC4s3Kx.jpg" alt></p><ul><li>将<code>1</code>号圆盘从A移到C</li><li>将<code>2</code>号圆盘从A移到B</li><li>将<code>1</code>号圆盘从C移到B</li></ul><p>再考虑复杂的情形：当有<code>n</code>个圆盘的时候如何解决？使用<strong>数学归纳法</strong>，假设<code>n-1</code>个圆盘的汉诺塔问题已经解决，将“上面<code>n-1</code>个圆盘”看成一个整体：</p><ul><li>将“上面<code>n-1</code>个圆盘”从A移到C</li><li>将第<code>n</code>号圆盘从A移到B</li><li>将“上面<code>n-1</code>个圆盘”从C移到B</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Hanoi</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> a, <span class="keyword">char</span> b, <span class="keyword">char</span> c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Move</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> a, <span class="keyword">char</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Input the number of disks:"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"steps of moving %d disks form A to B by means of C:\n"</span>, n);</span><br><span class="line">Hanoi(n, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Hanoi</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> a, <span class="keyword">char</span> b, <span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">Move(n, a, b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">Hanoi(n<span class="number">-1</span>, a, c, b);<span class="comment">//将“上面n-1个圆盘”从A移到C</span></span><br><span class="line">Move(n, a, b);   <span class="comment">//将第n号圆盘从A移到B</span></span><br><span class="line">Hanoi(n<span class="number">-1</span>, c, b, a);<span class="comment">//将“上面n-1个圆盘”从C移到B</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Move</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> a, <span class="keyword">char</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Move %d: from %c to %c\n"</span>, n, a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><hr><font color="#407600">【更多C语言系列】</font><ul><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/C和C-基本数据类型取值范围/">C &amp; C++基本数据类型取值范围</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/C和C-中memset用法/">C &amp; C++ memset</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/野指针的产生及其危害/">野指针的产生及其危害</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.pixabay.com/photo/2016/12/03/20/08/sukhoi-35-1880484_1280.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;C语言基础学习笔记（5）：递归&quot;&gt;&lt;a href=&quot;#C语言基础学习笔记（5）：递归&quot; class=&quot;headerlink&quot; title=&quot;C语言基础学习笔记（5）：递归&quot;&gt;&lt;/a&gt;C语言基础学习笔记（5）：递归&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;图：苏35发射空对空导弹&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;grey&quot;&gt; &lt;em&gt;Guderian&lt;/em&gt;出品 &lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;把现成的代码拿来使用就称为&lt;strong&gt;复用&lt;/strong&gt;，这么做可以大大提高编写效率。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;C&lt;/code&gt;语言中的函数可以&lt;strong&gt;嵌套调用&lt;/strong&gt;，不能&lt;strong&gt;嵌套定义&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;定义.&lt;/strong&gt;函数直接或间接调用了自己，称为&lt;strong&gt;递归调用（Recursive Call）&lt;/strong&gt;。这样的函数，称为&lt;strong&gt;递归函数（Recursive Function）&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;递归函数&lt;/strong&gt;包含&lt;strong&gt;基本条件&lt;/strong&gt;和&lt;strong&gt;一般条件&lt;/strong&gt;。&lt;strong&gt;基本条件&lt;/strong&gt;控制递归调用结束，&lt;strong&gt;一般条件&lt;/strong&gt;控制递归调用项基本条件转化。如果没有基本条件或者一般条件不能转化为基本条件，此时递归无法结束，变成“无穷递归”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通常下面三种情况需要使用递归：&lt;/p&gt;
&lt;p&gt;（1）&lt;strong&gt;数学定义&lt;/strong&gt;是递归的：计算阶乘，最大公约数和斐波那契数列&lt;/p&gt;
&lt;p&gt;（2）&lt;strong&gt;数据结构&lt;/strong&gt;时递归的：队列、链表、树和图&lt;/p&gt;
&lt;p&gt;（3）&lt;strong&gt;问题的解法&lt;/strong&gt;是递归的：汉诺塔，骑士游历，八皇后问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;典型递归问题示例：汉诺塔问题（&lt;a href=&quot;https://baike.baidu.com/item/%E6%B1%89%E8%AF%BA%E5%A1%94%E9%97%AE%E9%A2%98/1945186?fr=aladdin#1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;题目链接&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;先考虑比较简单的情形：当只有&lt;code&gt;2&lt;/code&gt;个圆盘的时候如何解决？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/02/17/cv6dfE7yMC4s3Kx.jpg&quot; alt&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将&lt;code&gt;1&lt;/code&gt;号圆盘从A移到C&lt;/li&gt;
&lt;li&gt;将&lt;code&gt;2&lt;/code&gt;号圆盘从A移到B&lt;/li&gt;
&lt;li&gt;将&lt;code&gt;1&lt;/code&gt;号圆盘从C移到B&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;再考虑复杂的情形：当有&lt;code&gt;n&lt;/code&gt;个圆盘的时候如何解决？使用&lt;strong&gt;数学归纳法&lt;/strong&gt;，假设&lt;code&gt;n-1&lt;/code&gt;个圆盘的汉诺塔问题已经解决，将“上面&lt;code&gt;n-1&lt;/code&gt;个圆盘”看成一个整体：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将“上面&lt;code&gt;n-1&lt;/code&gt;个圆盘”从A移到C&lt;/li&gt;
&lt;li&gt;将第&lt;code&gt;n&lt;/code&gt;号圆盘从A移到B&lt;/li&gt;
&lt;li&gt;将“上面&lt;code&gt;n-1&lt;/code&gt;个圆盘”从C移到B&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Hanoi&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; a, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; b, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; c)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Move&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; a, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Input the number of disks:&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, &amp;amp;n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;steps of moving %d disks form A to B by means of C:\n&quot;&lt;/span&gt;, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Hanoi(n, &lt;span class=&quot;string&quot;&gt;&#39;A&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;B&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;C&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Hanoi&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; a, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; b, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; c)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (n == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Move(n, a, b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Hanoi(n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, a, c, b);	&lt;span class=&quot;comment&quot;&gt;//将“上面n-1个圆盘”从A移到C&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Move(n, a, b);		   &lt;span class=&quot;comment&quot;&gt;//将第n号圆盘从A移到B&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Hanoi(n&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, c, b, a);	&lt;span class=&quot;comment&quot;&gt;//将“上面n-1个圆盘”从C移到B&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Move&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; a, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; b)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Move %d: from %c to %c\n&quot;&lt;/span&gt;, n, a, b);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="总结" scheme="https://G-SS-Hacker.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="C" scheme="https://G-SS-Hacker.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言基础学习笔记（4）：函数与防御式编程</title>
    <link href="https://g-ss-hacker.github.io/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%884%EF%BC%89%EF%BC%9A%E5%87%BD%E6%95%B0%E4%B8%8E%E9%98%B2%E5%BE%A1%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>https://g-ss-hacker.github.io/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%884%EF%BC%89%EF%BC%9A%E5%87%BD%E6%95%B0%E4%B8%8E%E9%98%B2%E5%BE%A1%E5%BC%8F%E7%BC%96%E7%A8%8B/</id>
    <published>2020-02-16T07:38:50.000Z</published>
    <updated>2020-02-17T05:22:14.344Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/02/16/A81KRsbrM4hy6nX.jpg" alt></p><h1 id="C语言基础学习笔记（4）：函数与防御式编程"><a href="#C语言基础学习笔记（4）：函数与防御式编程" class="headerlink" title="C语言基础学习笔记（4）：函数与防御式编程"></a>C语言基础学习笔记（4）：函数与防御式编程</h1><blockquote><p>图：塔克拉玛干沙漠</p></blockquote><p></p><p><font color="grey"> <em>Guderian出品</em> </font></p><p></p><ol><li><p><code>C</code>语言函数的返回值类型，可以是数组以外的任意一种类型。</p></li><li><p>在函数调用的过程中，<strong>实参</strong>和<strong>形参</strong>占用不同的内存空间，可以同名。</p></li><li><p>当函数定义在函数调用之后，<code>C89</code>标准默认函数返回值类型为<code>int</code>，而<code>C99</code>不再支持隐含的函数声明。</p></li><li><p>把所有函数的定义都放在主函数的前面也不意味着不需要函数原型，因为不一定只有主函数会调用你定义的函数，还是有可能出现函数的调用出现在函数的定义之前的情况。</p></li><li><p>综合<code>3</code>和<code>4</code>，应该在程序开头写清所有的函数原型。</p></li><li><p>函数设计的基本原则：</p><p>（1）函数规模要小</p><p>（2）函数功能要单一</p><p>（3）函数接口定义要清楚</p></li><li><p>断言：<code>assert()</code>为在<code>&lt;assert.h&gt;</code>中定义的宏，可把其“函数原型”视作<code>void assert(int expression)</code>。</p><p>（1）<code>expression</code>为真，pass</p><p>（2）<code>expression</code>为假，中断程序</p><p>可以用<code>if</code>语句代替断言，代价是程序编译后的目标代码体积变大，运行效率下降；使用断言便于在调试程序时发现错误，不影响程序执行效率。断言仅用于<code>debug</code>版本调试程序，不能用作<code>release</code>版本；换句话说只能用它确保预期不会发生的状况的确不会发生，而不能用它检查可能发生的状况是否发生。注意一个<code>assert</code>只能检验一个条件。</p></li></ol><a id="more"></a><hr><font color="#407600">【更多C语言系列】</font><ul><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/C和C-基本数据类型取值范围/">C &amp; C++基本数据类型取值范围</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/C和C-中memset用法/">C &amp; C++ memset</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/野指针的产生及其危害/">野指针的产生及其危害</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/02/16/A81KRsbrM4hy6nX.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;C语言基础学习笔记（4）：函数与防御式编程&quot;&gt;&lt;a href=&quot;#C语言基础学习笔记（4）：函数与防御式编程&quot; class=&quot;headerlink&quot; title=&quot;C语言基础学习笔记（4）：函数与防御式编程&quot;&gt;&lt;/a&gt;C语言基础学习笔记（4）：函数与防御式编程&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;图：塔克拉玛干沙漠&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;grey&quot;&gt; &lt;em&gt;Guderian出品&lt;/em&gt; &lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;C&lt;/code&gt;语言函数的返回值类型，可以是数组以外的任意一种类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在函数调用的过程中，&lt;strong&gt;实参&lt;/strong&gt;和&lt;strong&gt;形参&lt;/strong&gt;占用不同的内存空间，可以同名。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当函数定义在函数调用之后，&lt;code&gt;C89&lt;/code&gt;标准默认函数返回值类型为&lt;code&gt;int&lt;/code&gt;，而&lt;code&gt;C99&lt;/code&gt;不再支持隐含的函数声明。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;把所有函数的定义都放在主函数的前面也不意味着不需要函数原型，因为不一定只有主函数会调用你定义的函数，还是有可能出现函数的调用出现在函数的定义之前的情况。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;综合&lt;code&gt;3&lt;/code&gt;和&lt;code&gt;4&lt;/code&gt;，应该在程序开头写清所有的函数原型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;函数设计的基本原则：&lt;/p&gt;
&lt;p&gt;（1）函数规模要小&lt;/p&gt;
&lt;p&gt;（2）函数功能要单一&lt;/p&gt;
&lt;p&gt;（3）函数接口定义要清楚&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;断言：&lt;code&gt;assert()&lt;/code&gt;为在&lt;code&gt;&amp;lt;assert.h&amp;gt;&lt;/code&gt;中定义的宏，可把其“函数原型”视作&lt;code&gt;void assert(int expression)&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;（1）&lt;code&gt;expression&lt;/code&gt;为真，pass&lt;/p&gt;
&lt;p&gt;（2）&lt;code&gt;expression&lt;/code&gt;为假，中断程序&lt;/p&gt;
&lt;p&gt;可以用&lt;code&gt;if&lt;/code&gt;语句代替断言，代价是程序编译后的目标代码体积变大，运行效率下降；使用断言便于在调试程序时发现错误，不影响程序执行效率。断言仅用于&lt;code&gt;debug&lt;/code&gt;版本调试程序，不能用作&lt;code&gt;release&lt;/code&gt;版本；换句话说只能用它确保预期不会发生的状况的确不会发生，而不能用它检查可能发生的状况是否发生。注意一个&lt;code&gt;assert&lt;/code&gt;只能检验一个条件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="总结" scheme="https://G-SS-Hacker.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="C" scheme="https://G-SS-Hacker.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Python-gzip库压缩和解压方法</title>
    <link href="https://g-ss-hacker.github.io/Python-gzip%E5%BA%93%E5%8E%8B%E7%BC%A9%E5%92%8C%E8%A7%A3%E5%8E%8B%E6%96%B9%E6%B3%95/"/>
    <id>https://g-ss-hacker.github.io/Python-gzip%E5%BA%93%E5%8E%8B%E7%BC%A9%E5%92%8C%E8%A7%A3%E5%8E%8B%E6%96%B9%E6%B3%95/</id>
    <published>2020-02-13T13:05:19.000Z</published>
    <updated>2020-02-14T06:12:32.479Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.ax1x.com/2020/02/12/1HpSE9.png" alt></p><h1 id="python-gzip库压缩和解压方法"><a href="#python-gzip库压缩和解压方法" class="headerlink" title="python-gzip库压缩和解压方法"></a>python-gzip库压缩和解压方法</h1><blockquote><p>图：1130近防炮</p></blockquote><p></p><p><font color="grey"> <em>Guderian出品</em> </font></p><p></p><h2 id="使用gzip压缩文件"><a href="#使用gzip压缩文件" class="headerlink" title="使用gzip压缩文件"></a>使用gzip压缩文件</h2><blockquote><p>先用<code>open()</code>打开待压缩文件，再用<code>gzip.opnen()</code>打开压缩文件，最后读入待压缩文件内容并写入压文件中。</p></blockquote><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩文件：文件路径、待压缩文件名、压缩文件名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compress</span><span class="params">(path,name_in,name_out)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(path+name_in,<span class="string">'rb'</span>) <span class="keyword">as</span> f_in:</span><br><span class="line">        <span class="keyword">with</span> gzip.open(path+name_out,<span class="string">'wb'</span>) <span class="keyword">as</span> f_out:</span><br><span class="line">            f_out.write(f_in.read())</span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>如果你不喜欢用<code>with</code>语句，还可以这么写（记得<code>close()</code>就行了）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩文件：文件路径、待压缩文件名、压缩文件名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compress</span><span class="params">(path,name_in,name_out)</span>:</span></span><br><span class="line">    f_in = open(path+name_in,<span class="string">'rb'</span>)</span><br><span class="line">    f_out = gzip.open(path+name_out,<span class="string">'wb'</span>)</span><br><span class="line">    f_out.write(f_in.read())</span><br><span class="line">    f_in.close()</span><br><span class="line">    f_out.close()</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="使用gzip解压文件"><a href="#使用gzip解压文件" class="headerlink" title="使用gzip解压文件"></a>使用gzip解压文件</h2><blockquote><p>先用<code>gzip.opnen()</code>打开压缩文件，再用<code>open()</code>打开解压文件，最后读入压缩文件内容并写入解压文件中。</p></blockquote><h3 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压缩：文件路径、压缩文件名、解压缩文件名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decompress</span><span class="params">(path,name_in,name_out)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> gzip.open(path+name_in,<span class="string">'rb'</span>) <span class="keyword">as</span> f_in:</span><br><span class="line">        <span class="keyword">with</span> open(path+name_out,<span class="string">'wb'</span>) <span class="keyword">as</span> f_out:</span><br><span class="line">            f_out.write(f_in.read())</span><br></pre></td></tr></table></figure><h3 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gzip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压缩：文件路径、压缩文件名、解压缩文件名</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decompress</span><span class="params">(path,name_in,name_out)</span>:</span></span><br><span class="line">    f_in = gzip.open(path+name_in,<span class="string">'rb'</span>)</span><br><span class="line">    f_out = open(path+name_out,<span class="string">'wb'</span>)</span><br><span class="line">    f_out.write(f_in.read())</span><br><span class="line">    f_in.close()</span><br><span class="line">    f_out.close()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/12/1HpSE9.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;python-gzip库压缩和解压方法&quot;&gt;&lt;a href=&quot;#python-gzip库压缩和解压方法&quot; class=&quot;headerlink&quot; title=&quot;python-gzip库压缩和解压方法&quot;&gt;&lt;/a&gt;python-gzip库压缩和解压方法&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;图：1130近防炮&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;grey&quot;&gt; &lt;em&gt;Guderian出品&lt;/em&gt; &lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用gzip压缩文件&quot;&gt;&lt;a href=&quot;#使用gzip压缩文件&quot; class=&quot;headerlink&quot; title=&quot;使用gzip压缩文件&quot;&gt;&lt;/a&gt;使用gzip压缩文件&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;先用&lt;code&gt;open()&lt;/code&gt;打开待压缩文件，再用&lt;code&gt;gzip.opnen()&lt;/code&gt;打开压缩文件，最后读入待压缩文件内容并写入压文件中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; gzip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 压缩文件：文件路径、待压缩文件名、压缩文件名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compress&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(path,name_in,name_out)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; open(path+name_in,&lt;span class=&quot;string&quot;&gt;&#39;rb&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; f_in:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; gzip.open(path+name_out,&lt;span class=&quot;string&quot;&gt;&#39;wb&#39;&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; f_out:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            f_out.write(f_in.read())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;方法二&quot;&gt;&lt;a href=&quot;#方法二&quot; class=&quot;headerlink&quot; title=&quot;方法二&quot;&gt;&lt;/a&gt;方法二&lt;/h3&gt;&lt;p&gt;如果你不喜欢用&lt;code&gt;with&lt;/code&gt;语句，还可以这么写（记得&lt;code&gt;close()&lt;/code&gt;就行了）：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; gzip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 压缩文件：文件路径、待压缩文件名、压缩文件名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;compress&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(path,name_in,name_out)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f_in = open(path+name_in,&lt;span class=&quot;string&quot;&gt;&#39;rb&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f_out = gzip.open(path+name_out,&lt;span class=&quot;string&quot;&gt;&#39;wb&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f_out.write(f_in.read())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f_in.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    f_out.close()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="总结" scheme="https://G-SS-Hacker.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Python" scheme="https://G-SS-Hacker.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>numpy中random.rand()和random.randn()函数</title>
    <link href="https://g-ss-hacker.github.io/numpy%E4%B8%ADrandom-rand%E5%92%8Crandom-randn%E5%87%BD%E6%95%B0/"/>
    <id>https://g-ss-hacker.github.io/numpy%E4%B8%ADrandom-rand%E5%92%8Crandom-randn%E5%87%BD%E6%95%B0/</id>
    <published>2020-02-12T04:29:58.000Z</published>
    <updated>2020-02-14T06:12:40.280Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.ax1x.com/2020/02/11/1TIaid.png" alt></p><h1 id="numpy中random-rand-和random-randn-函数"><a href="#numpy中random-rand-和random-randn-函数" class="headerlink" title="numpy中random.rand()和random.randn()函数"></a>numpy中random.rand()和random.randn()函数</h1><blockquote><p>图：芝加哥（Chicago）</p></blockquote><p></p><p><font color="grey"> <em>Guderian出品</em> </font></p><p></p><h2 id="random-rand"><a href="#random-rand" class="headerlink" title="random.rand()"></a>random.rand()</h2><p><code>random.rand()</code>的作用是产生一个随机数列表，其包含的所有数字的取值范围为<code>[0, 1)</code>且满足随机分布。其参数是用逗号<code>,</code>分隔的若干正整数，正整数的个数为产生列表的维度，每个正整数的大小为该维度列表的大小。不写参数即返回一个随机数。如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> random <span class="keyword">as</span> rd</span><br><span class="line"></span><br><span class="line">print(rd.rand())</span><br><span class="line">print(<span class="string">'============================================================'</span>)</span><br><span class="line">print(rd.rand(<span class="number">4</span>))</span><br><span class="line">print(<span class="string">'============================================================'</span>)</span><br><span class="line">print(rd.rand(<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">print(<span class="string">'============================================================'</span>)</span><br><span class="line">print(rd.rand(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>以上代码输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">0.25236670150458973</span><br><span class="line">============================================================</span><br><span class="line">[0.85489794 0.52771465 0.80216108 0.57248852]</span><br><span class="line">============================================================</span><br><span class="line">[[0.73314253 0.51901163 0.77088391 0.56885799]</span><br><span class="line"> [0.46570988 0.34268891 0.06820935 0.37792418]</span><br><span class="line"> [0.07962608 0.98281711 0.18161285 0.8118587 ]]</span><br><span class="line">============================================================</span><br><span class="line">[[[0.87496164 0.68841325]</span><br><span class="line">  [0.56949441 0.16097144]]</span><br><span class="line"></span><br><span class="line"> [[0.46688002 0.34517205]</span><br><span class="line">  [0.22503996 0.59251187]]]</span><br></pre></td></tr></table></figure><h2 id="random-randn"><a href="#random-randn" class="headerlink" title="random.randn()"></a>random.randn()</h2><p><code>random.randn()</code>的作用是产生一个随机数列表，其包含的所有数字满足标准正态分布（高斯分布）。其参数是用逗号<code>,</code>分隔的若干正整数，正整数的个数为产生列表的维度，每个正整数的大小为该维度列表的大小。不写参数即返回一个随机数。如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> random <span class="keyword">as</span> rd</span><br><span class="line"></span><br><span class="line">print(rd.randn())</span><br><span class="line">print(<span class="string">'============================================================'</span>)</span><br><span class="line">print(rd.randn(<span class="number">4</span>))</span><br><span class="line">print(<span class="string">'============================================================'</span>)</span><br><span class="line">print(rd.randn(<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line">print(<span class="string">'============================================================'</span>)</span><br><span class="line">print(rd.randn(<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>以上代码输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">0.5488828975747972</span><br><span class="line">============================================================</span><br><span class="line">[-0.24751502 -0.22512748  0.37969188 -0.11569475]</span><br><span class="line">============================================================</span><br><span class="line">[[-0.1466201   1.76939854 -0.00321878 -0.66646013]</span><br><span class="line"> [-0.77183601 -0.26496068  1.10728223 -1.34873652]</span><br><span class="line"> [ 0.59090275  0.03795507 -0.95272402 -1.20102365]]</span><br><span class="line">============================================================</span><br><span class="line">[[[-0.07904398  0.78989335]</span><br><span class="line">  [ 2.18617751 -0.926691  ]]</span><br><span class="line"></span><br><span class="line"> [[ 0.40184526 -0.79589304]</span><br><span class="line">  [ 0.72023249  1.49161166]]]</span><br></pre></td></tr></table></figure><a id="more"></a><hr><blockquote><p>标准正态分布（高斯分布）：均值为0，方差为1的分布</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/11/1TIaid.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;numpy中random-rand-和random-randn-函数&quot;&gt;&lt;a href=&quot;#numpy中random-rand-和random-randn-函数&quot; class=&quot;headerlink&quot; title=&quot;numpy中random.rand()和random.randn()函数&quot;&gt;&lt;/a&gt;numpy中random.rand()和random.randn()函数&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;图：芝加哥（Chicago）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;grey&quot;&gt; &lt;em&gt;Guderian出品&lt;/em&gt; &lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;random-rand&quot;&gt;&lt;a href=&quot;#random-rand&quot; class=&quot;headerlink&quot; title=&quot;random.rand()&quot;&gt;&lt;/a&gt;random.rand()&lt;/h2&gt;&lt;p&gt;&lt;code&gt;random.rand()&lt;/code&gt;的作用是产生一个随机数列表，其包含的所有数字的取值范围为&lt;code&gt;[0, 1)&lt;/code&gt;且满足随机分布。其参数是用逗号&lt;code&gt;,&lt;/code&gt;分隔的若干正整数，正整数的个数为产生列表的维度，每个正整数的大小为该维度列表的大小。不写参数即返回一个随机数。如：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; random &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; rd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(rd.rand())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;============================================================&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(rd.rand(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;============================================================&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(rd.rand(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;============================================================&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(rd.rand(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上代码输出结果为：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0.25236670150458973&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;============================================================&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[0.85489794 0.52771465 0.80216108 0.57248852]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;============================================================&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[0.73314253 0.51901163 0.77088391 0.56885799]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; [0.46570988 0.34268891 0.06820935 0.37792418]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; [0.07962608 0.98281711 0.18161285 0.8118587 ]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;============================================================&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[[0.87496164 0.68841325]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [0.56949441 0.16097144]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; [[0.46688002 0.34517205]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [0.22503996 0.59251187]]]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;random-randn&quot;&gt;&lt;a href=&quot;#random-randn&quot; class=&quot;headerlink&quot; title=&quot;random.randn()&quot;&gt;&lt;/a&gt;random.randn()&lt;/h2&gt;&lt;p&gt;&lt;code&gt;random.randn()&lt;/code&gt;的作用是产生一个随机数列表，其包含的所有数字满足标准正态分布（高斯分布）。其参数是用逗号&lt;code&gt;,&lt;/code&gt;分隔的若干正整数，正整数的个数为产生列表的维度，每个正整数的大小为该维度列表的大小。不写参数即返回一个随机数。如：&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; numpy &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; random &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; rd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(rd.randn())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;============================================================&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(rd.randn(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;============================================================&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(rd.randn(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;============================================================&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(rd.randn(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上代码输出结果为：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;0.5488828975747972&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;============================================================&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[-0.24751502 -0.22512748  0.37969188 -0.11569475]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;============================================================&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[-0.1466201   1.76939854 -0.00321878 -0.66646013]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; [-0.77183601 -0.26496068  1.10728223 -1.34873652]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; [ 0.59090275  0.03795507 -0.95272402 -1.20102365]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;============================================================&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[[[-0.07904398  0.78989335]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [ 2.18617751 -0.926691  ]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; [[ 0.40184526 -0.79589304]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  [ 0.72023249  1.49161166]]]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="总结" scheme="https://G-SS-Hacker.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="Python" scheme="https://G-SS-Hacker.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>C语言基础学习笔记（3）：关系运算符与逻辑运算符</title>
    <link href="https://g-ss-hacker.github.io/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%883%EF%BC%89%EF%BC%9A%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>https://g-ss-hacker.github.io/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%883%EF%BC%89%EF%BC%9A%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6/</id>
    <published>2020-02-11T04:54:29.000Z</published>
    <updated>2020-02-17T07:47:12.787Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.ax1x.com/2020/02/09/1hZCp6.png" alt></p><h1 id="C语言基础学习笔记（3）：关系运算符与逻辑运算符"><a href="#C语言基础学习笔记（3）：关系运算符与逻辑运算符" class="headerlink" title="C语言基础学习笔记（3）：关系运算符与逻辑运算符"></a>C语言基础学习笔记（3）：关系运算符与逻辑运算符</h1><blockquote><p>图：北极狐（Artic Fox）</p></blockquote><p></p><p><font color="grey"> <em>Guderian出品</em> </font></p><p></p><ol><li><p><code>C</code>语言的“短路”特性：若表达式的值可由先计算的左操作数的值单独推导出来，那么将不再计算右操作数的值。“短路”特性有时很有用，如<code>(i != 0) &amp;&amp; (j / i &gt; 0)</code>使得不会发生除<code>0</code>的情况。</p></li><li><p><code>C</code>条件表达式：<code>表达式1 ? 表达式2 : 表达式3</code>：如果<code>表达式1</code>为真，则返回<code>表达式2</code>；否则<code>表达式3</code>。</p></li><li><p>整数的数值溢出——上溢出：<code>|一个数值运算结果| &gt; |类型能表示的最大数|</code>。进位超过最高位而发生进位丢失或进位达到最高位而改变符号位。</p></li><li><p>对于无符号数，不能随意用<code>a - b &lt; 0</code>取代<code>a &lt; b</code>，因为前者可能发生数值溢出，导致判断结果发生错误。</p></li><li><p>浮点数的数值溢出，不仅有<strong>上溢出</strong>还有<strong>下溢出</strong>：</p><p>上溢出：<code>|数值运算结果| &gt; |类型能表示的最大数|</code></p><p>下溢出：<code>|数值运算结果| &lt; |类型能表示的最小数|</code>，此时系统把该结果处理成机器<code>0</code></p><p><img src="https://s2.ax1x.com/2020/02/09/1f2LND.png" alt></p></li><li><p>把<code>float</code>赋值给<code>int</code>会丢失小数（不经四舍五入）。</p></li><li><code>&lt;stdlib.h&gt;</code>中的<code>exit(0)</code>终止整个程序的执行强制返回操作系统。当其参数为<code>0</code>时表示正常退出，非<code>0</code>表示程序出错。</li></ol><a id="more"></a><hr><font color="#407600">【更多C语言系列】</font><ul><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/C和C-基本数据类型取值范围/">C &amp; C++基本数据类型取值范围</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/C和C-中memset用法/">C &amp; C++ memset</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/野指针的产生及其危害/">野指针的产生及其危害</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/09/1hZCp6.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;C语言基础学习笔记（3）：关系运算符与逻辑运算符&quot;&gt;&lt;a href=&quot;#C语言基础学习笔记（3）：关系运算符与逻辑运算符&quot; class=&quot;headerlink&quot; title=&quot;C语言基础学习笔记（3）：关系运算符与逻辑运算符&quot;&gt;&lt;/a&gt;C语言基础学习笔记（3）：关系运算符与逻辑运算符&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;图：北极狐（Artic Fox）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;grey&quot;&gt; &lt;em&gt;Guderian出品&lt;/em&gt; &lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;C&lt;/code&gt;语言的“短路”特性：若表达式的值可由先计算的左操作数的值单独推导出来，那么将不再计算右操作数的值。“短路”特性有时很有用，如&lt;code&gt;(i != 0) &amp;amp;&amp;amp; (j / i &amp;gt; 0)&lt;/code&gt;使得不会发生除&lt;code&gt;0&lt;/code&gt;的情况。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;C&lt;/code&gt;条件表达式：&lt;code&gt;表达式1 ? 表达式2 : 表达式3&lt;/code&gt;：如果&lt;code&gt;表达式1&lt;/code&gt;为真，则返回&lt;code&gt;表达式2&lt;/code&gt;；否则&lt;code&gt;表达式3&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;整数的数值溢出——上溢出：&lt;code&gt;|一个数值运算结果| &amp;gt; |类型能表示的最大数|&lt;/code&gt;。进位超过最高位而发生进位丢失或进位达到最高位而改变符号位。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于无符号数，不能随意用&lt;code&gt;a - b &amp;lt; 0&lt;/code&gt;取代&lt;code&gt;a &amp;lt; b&lt;/code&gt;，因为前者可能发生数值溢出，导致判断结果发生错误。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;浮点数的数值溢出，不仅有&lt;strong&gt;上溢出&lt;/strong&gt;还有&lt;strong&gt;下溢出&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;上溢出：&lt;code&gt;|数值运算结果| &amp;gt; |类型能表示的最大数|&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;下溢出：&lt;code&gt;|数值运算结果| &amp;lt; |类型能表示的最小数|&lt;/code&gt;，此时系统把该结果处理成机器&lt;code&gt;0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/09/1f2LND.png&quot; alt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;把&lt;code&gt;float&lt;/code&gt;赋值给&lt;code&gt;int&lt;/code&gt;会丢失小数（不经四舍五入）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;stdlib.h&amp;gt;&lt;/code&gt;中的&lt;code&gt;exit(0)&lt;/code&gt;终止整个程序的执行强制返回操作系统。当其参数为&lt;code&gt;0&lt;/code&gt;时表示正常退出，非&lt;code&gt;0&lt;/code&gt;表示程序出错。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="总结" scheme="https://G-SS-Hacker.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="C" scheme="https://G-SS-Hacker.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C和C++中rand()函数</title>
    <link href="https://g-ss-hacker.github.io/C%E5%92%8CC-%E4%B8%ADrand%E5%87%BD%E6%95%B0/"/>
    <id>https://g-ss-hacker.github.io/C%E5%92%8CC-%E4%B8%ADrand%E5%87%BD%E6%95%B0/</id>
    <published>2020-02-10T02:15:50.000Z</published>
    <updated>2020-02-10T02:20:08.409Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.pixabay.com/photo/2016/05/24/16/48/mountains-1412683_1280.png" alt></p><h1 id="C和C-中rand-函数"><a href="#C和C-中rand-函数" class="headerlink" title="C和C++中rand()函数"></a>C和C++中rand()函数</h1><blockquote><p>本文遵守<code>cc0</code>协议😎（图片和代码也是）</p></blockquote><p><font color="grey"> <em>Guderian出品</em> </font></p><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><p><code>&lt;stdlib.h&gt;</code></p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p><code>int rand(void)</code></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>生成一个随机数，其大小介于<code>0</code>和<code>RAND_MAX</code>之间。其中<code>RAND_MAX</code>在头文件<code>&lt;stdlib.h</code>和<code>&lt;cstdlib&gt;</code>中宏定义为<code>#define RAND_MAX 0X7fff</code>，十进制形式为<code>32767</code>即<code>(1 &lt;&lt; 15) - 1</code>。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>调用<code>rand()</code>函数应该通过<code>srand(unsigned int)</code>设置随机数种子，一旦设置随机数种子，那么接下来程序将遵循同一个规则产生随机数。如果你没有设置随机数种子，那么程序将自动把随机数种子设置为<code>1</code>。</p><h3 id="设置随机数种子为常数"><a href="#设置随机数种子为常数" class="headerlink" title="设置随机数种子为常数"></a>设置随机数种子为常数</h3><p>如果设置随机数种子为常数（如<code>1</code>），那么不管在什么时间、什么环境下运行程序都将得到相同的随机数。使用方法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cc0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">srand(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> randnum = rand();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, randnum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="设置随机数种子为系统时间戳"><a href="#设置随机数种子为系统时间戳" class="headerlink" title="设置随机数种子为系统时间戳"></a>设置随机数种子为系统时间戳</h3><p>如果想要得到不同的随机数，一种常用的方法是设置随机数种子为系统时间戳<code>time(NULL)</code>（先包含<code>&lt;time.h&gt;</code>头文件），即从1970年1月1日0时到当前时刻所经过的秒数。使用方法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cc0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">srand (time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="keyword">int</span> randnum = rand();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, randnum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><hr><font color="#407600">【更多C语言系列】</font><ul><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/C和C-基本数据类型取值范围/">C &amp; C++基本数据类型取值范围</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/C和C-中memset用法/">C &amp; C++ memset</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/野指针的产生及其危害/">野指针的产生及其危害</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.pixabay.com/photo/2016/05/24/16/48/mountains-1412683_1280.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;C和C-中rand-函数&quot;&gt;&lt;a href=&quot;#C和C-中rand-函数&quot; class=&quot;headerlink&quot; title=&quot;C和C++中rand()函数&quot;&gt;&lt;/a&gt;C和C++中rand()函数&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本文遵守&lt;code&gt;cc0&lt;/code&gt;协议😎（图片和代码也是）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;font color=&quot;grey&quot;&gt; &lt;em&gt;Guderian出品&lt;/em&gt; &lt;/font&gt;&lt;/p&gt;

&lt;h2 id=&quot;头文件&quot;&gt;&lt;a href=&quot;#头文件&quot; class=&quot;headerlink&quot; title=&quot;头文件&quot;&gt;&lt;/a&gt;头文件&lt;/h2&gt;&lt;p&gt;&lt;code&gt;&amp;lt;stdlib.h&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;声明&quot;&gt;&lt;a href=&quot;#声明&quot; class=&quot;headerlink&quot; title=&quot;声明&quot;&gt;&lt;/a&gt;声明&lt;/h2&gt;&lt;p&gt;&lt;code&gt;int rand(void)&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;p&gt;生成一个随机数，其大小介于&lt;code&gt;0&lt;/code&gt;和&lt;code&gt;RAND_MAX&lt;/code&gt;之间。其中&lt;code&gt;RAND_MAX&lt;/code&gt;在头文件&lt;code&gt;&amp;lt;stdlib.h&lt;/code&gt;和&lt;code&gt;&amp;lt;cstdlib&amp;gt;&lt;/code&gt;中宏定义为&lt;code&gt;#define RAND_MAX 0X7fff&lt;/code&gt;，十进制形式为&lt;code&gt;32767&lt;/code&gt;即&lt;code&gt;(1 &amp;lt;&amp;lt; 15) - 1&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h2&gt;&lt;p&gt;调用&lt;code&gt;rand()&lt;/code&gt;函数应该通过&lt;code&gt;srand(unsigned int)&lt;/code&gt;设置随机数种子，一旦设置随机数种子，那么接下来程序将遵循同一个规则产生随机数。如果你没有设置随机数种子，那么程序将自动把随机数种子设置为&lt;code&gt;1&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;设置随机数种子为常数&quot;&gt;&lt;a href=&quot;#设置随机数种子为常数&quot; class=&quot;headerlink&quot; title=&quot;设置随机数种子为常数&quot;&gt;&lt;/a&gt;设置随机数种子为常数&lt;/h3&gt;&lt;p&gt;如果设置随机数种子为常数（如&lt;code&gt;1&lt;/code&gt;），那么不管在什么时间、什么环境下运行程序都将得到相同的随机数。使用方法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//cc0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	srand(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; randnum = rand();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d\n&quot;&lt;/span&gt;, randnum);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;设置随机数种子为系统时间戳&quot;&gt;&lt;a href=&quot;#设置随机数种子为系统时间戳&quot; class=&quot;headerlink&quot; title=&quot;设置随机数种子为系统时间戳&quot;&gt;&lt;/a&gt;设置随机数种子为系统时间戳&lt;/h3&gt;&lt;p&gt;如果想要得到不同的随机数，一种常用的方法是设置随机数种子为系统时间戳&lt;code&gt;time(NULL)&lt;/code&gt;（先包含&lt;code&gt;&amp;lt;time.h&amp;gt;&lt;/code&gt;头文件），即从1970年1月1日0时到当前时刻所经过的秒数。使用方法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//cc0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	srand (time(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; randnum = rand();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d\n&quot;&lt;/span&gt;, randnum);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="总结" scheme="https://G-SS-Hacker.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="C-plus-plus" scheme="https://G-SS-Hacker.github.io/tags/C-plus-plus/"/>
    
      <category term="C" scheme="https://G-SS-Hacker.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言基础学习笔记（2）：格式化输入与输出</title>
    <link href="https://g-ss-hacker.github.io/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89%EF%BC%9A%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/"/>
    <id>https://g-ss-hacker.github.io/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89%EF%BC%9A%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/</id>
    <published>2020-02-09T04:35:51.000Z</published>
    <updated>2020-02-16T07:23:33.631Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.ax1x.com/2020/02/09/1faKYV.png" alt></p><h1 id="C语言基础学习笔记（2）：格式化输入与输出"><a href="#C语言基础学习笔记（2）：格式化输入与输出" class="headerlink" title="C语言基础学习笔记（2）：格式化输入与输出"></a>C语言基础学习笔记（2）：格式化输入与输出</h1><blockquote><p>图：乞力马扎罗山（Kilimanjaro）</p></blockquote><p></p><p><font color="grey"> <em>Guderian出品</em> </font></p><p></p><ol><li><p><code>C</code>语言格式化屏幕输出：<code>printf(格式控制字符串, 输出值参数表);</code></p><p><code>C</code>语言格式化屏幕输入：<code>scanf(格式控制字符串, 输入地址表);</code></p></li><li><p>问题：<code>printf()</code>用<code>%</code>作为格式字符的标识，那么如何输出<code>%</code>呢？<code>C</code>规定，连续两个百分号出现在格式控制字符串中就表示要输出一个百分号</p></li><li><p>如何分隔多个输入数据？</p><p>1）空格、<code>Tab</code>或回车</p><p>2）达到输入位宽</p><p>3）遇到非法字符</p></li><li><p>如何判断<code>scanf()</code>函数读入了正确的数据项数呢？</p><p>事实上，<code>scanf()</code>是有返回值的，它的返回值就是正确读入的数据项数。现在明白<code>while(scanf(...))</code>为什么正确了吧？</p></li><li><p><code>scanf()</code>格式控制字符串中的普通字符原样输入。注意格式字符为<code>%f, %e</code>为输入<code>float</code>型且不能指定精度，格式字符为<code>%c</code>为一个字符包括空白字符（如空格和制表符）。</p></li><li><p><code>scanf()</code>格式修饰符</p><p><img src="https://i.loli.net/2020/02/08/NJ3vn2TEYZcFXx4.png" alt></p></li><li><p>字符型常量：所有的<code>ASCII</code>码都可以通过转义方式表示，其中<code>\ddd</code>为<code>1</code>到<code>3</code>位八进制<code>ASCII</code>码值所代表的字符，<code>\xhh</code>为<code>1</code>到<code>2</code>为十六进制<code>ASCII</code>码值所代表的字符。如：<code>&#39;B&#39;</code>等价于<code>&#39;\102&#39;</code>等价于<code>&#39;\x42&#39;</code>。</p></li><li><p>大小写英文字母的<code>ASCII</code>值相差<code>32</code>，即<code>大写字母+32=小写字母</code>。</p></li><li><p>单个字符的输入输出：</p><p><code>putchar(ch)</code>：向屏幕输出一个字符，字符型变量<code>ch</code>的值</p><p><code>ch = getchar()</code>：从键盘接受的字符作为<code>getchar()</code>的函数值，无参数</p></li><li><p>用<code>getchar()</code>输入时应注意的问题：<code>getchar()</code>函数并不是直接读取用户输入的字符，而是将输入字符先放在输入缓冲队列中，再从缓冲队列读取字符，直到输入回车符或文件结束符<code>EOF</code>时，程序才认为输入结束；一行输入结束，<code>getchar()</code>才开始从输入缓冲队列读取字符，前面函数没读取的数据仍在缓冲队列中，将被下一个<code>getchar()</code>函数读取。</p></li><li><p>在<code>Linux/Unix</code>下键入<code>Ctrl + D</code>或在<code>Windows</code>下键入<code>Ctrl + Z</code>，<code>getchar()</code>函数的确是会返回<code>-1</code>即<code>EOF</code>（<code>End Of File</code>）的，严格意义上应该用<code>int</code>类型来接收<code>getchar()</code>的返回值。</p></li><li><p>注意用<code>%c</code>格式读入字符时，空格和回车等空白字符都会被当做有效字符读入，在<code>%c</code>前加一个空格可以忽略缓冲区中的空白字符。</p></li></ol><a id="more"></a><hr><font color="#407600">【更多C语言系列】</font><ul><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/C和C-基本数据类型取值范围/">C &amp; C++基本数据类型取值范围</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/C和C-中memset用法/">C &amp; C++ memset</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/野指针的产生及其危害/">野指针的产生及其危害</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/09/1faKYV.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;C语言基础学习笔记（2）：格式化输入与输出&quot;&gt;&lt;a href=&quot;#C语言基础学习笔记（2）：格式化输入与输出&quot; class=&quot;headerlink&quot; title=&quot;C语言基础学习笔记（2）：格式化输入与输出&quot;&gt;&lt;/a&gt;C语言基础学习笔记（2）：格式化输入与输出&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;图：乞力马扎罗山（Kilimanjaro）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;grey&quot;&gt; &lt;em&gt;Guderian出品&lt;/em&gt; &lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;C&lt;/code&gt;语言格式化屏幕输出：&lt;code&gt;printf(格式控制字符串, 输出值参数表);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C&lt;/code&gt;语言格式化屏幕输入：&lt;code&gt;scanf(格式控制字符串, 输入地址表);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;问题：&lt;code&gt;printf()&lt;/code&gt;用&lt;code&gt;%&lt;/code&gt;作为格式字符的标识，那么如何输出&lt;code&gt;%&lt;/code&gt;呢？&lt;code&gt;C&lt;/code&gt;规定，连续两个百分号出现在格式控制字符串中就表示要输出一个百分号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如何分隔多个输入数据？&lt;/p&gt;
&lt;p&gt;1）空格、&lt;code&gt;Tab&lt;/code&gt;或回车&lt;/p&gt;
&lt;p&gt;2）达到输入位宽&lt;/p&gt;
&lt;p&gt;3）遇到非法字符&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如何判断&lt;code&gt;scanf()&lt;/code&gt;函数读入了正确的数据项数呢？&lt;/p&gt;
&lt;p&gt;事实上，&lt;code&gt;scanf()&lt;/code&gt;是有返回值的，它的返回值就是正确读入的数据项数。现在明白&lt;code&gt;while(scanf(...))&lt;/code&gt;为什么正确了吧？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;scanf()&lt;/code&gt;格式控制字符串中的普通字符原样输入。注意格式字符为&lt;code&gt;%f, %e&lt;/code&gt;为输入&lt;code&gt;float&lt;/code&gt;型且不能指定精度，格式字符为&lt;code&gt;%c&lt;/code&gt;为一个字符包括空白字符（如空格和制表符）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;scanf()&lt;/code&gt;格式修饰符&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/02/08/NJ3vn2TEYZcFXx4.png&quot; alt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字符型常量：所有的&lt;code&gt;ASCII&lt;/code&gt;码都可以通过转义方式表示，其中&lt;code&gt;\ddd&lt;/code&gt;为&lt;code&gt;1&lt;/code&gt;到&lt;code&gt;3&lt;/code&gt;位八进制&lt;code&gt;ASCII&lt;/code&gt;码值所代表的字符，&lt;code&gt;\xhh&lt;/code&gt;为&lt;code&gt;1&lt;/code&gt;到&lt;code&gt;2&lt;/code&gt;为十六进制&lt;code&gt;ASCII&lt;/code&gt;码值所代表的字符。如：&lt;code&gt;&amp;#39;B&amp;#39;&lt;/code&gt;等价于&lt;code&gt;&amp;#39;\102&amp;#39;&lt;/code&gt;等价于&lt;code&gt;&amp;#39;\x42&amp;#39;&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;大小写英文字母的&lt;code&gt;ASCII&lt;/code&gt;值相差&lt;code&gt;32&lt;/code&gt;，即&lt;code&gt;大写字母+32=小写字母&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;单个字符的输入输出：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;putchar(ch)&lt;/code&gt;：向屏幕输出一个字符，字符型变量&lt;code&gt;ch&lt;/code&gt;的值&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ch = getchar()&lt;/code&gt;：从键盘接受的字符作为&lt;code&gt;getchar()&lt;/code&gt;的函数值，无参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;用&lt;code&gt;getchar()&lt;/code&gt;输入时应注意的问题：&lt;code&gt;getchar()&lt;/code&gt;函数并不是直接读取用户输入的字符，而是将输入字符先放在输入缓冲队列中，再从缓冲队列读取字符，直到输入回车符或文件结束符&lt;code&gt;EOF&lt;/code&gt;时，程序才认为输入结束；一行输入结束，&lt;code&gt;getchar()&lt;/code&gt;才开始从输入缓冲队列读取字符，前面函数没读取的数据仍在缓冲队列中，将被下一个&lt;code&gt;getchar()&lt;/code&gt;函数读取。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在&lt;code&gt;Linux/Unix&lt;/code&gt;下键入&lt;code&gt;Ctrl + D&lt;/code&gt;或在&lt;code&gt;Windows&lt;/code&gt;下键入&lt;code&gt;Ctrl + Z&lt;/code&gt;，&lt;code&gt;getchar()&lt;/code&gt;函数的确是会返回&lt;code&gt;-1&lt;/code&gt;即&lt;code&gt;EOF&lt;/code&gt;（&lt;code&gt;End Of File&lt;/code&gt;）的，严格意义上应该用&lt;code&gt;int&lt;/code&gt;类型来接收&lt;code&gt;getchar()&lt;/code&gt;的返回值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注意用&lt;code&gt;%c&lt;/code&gt;格式读入字符时，空格和回车等空白字符都会被当做有效字符读入，在&lt;code&gt;%c&lt;/code&gt;前加一个空格可以忽略缓冲区中的空白字符。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="总结" scheme="https://G-SS-Hacker.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="C" scheme="https://G-SS-Hacker.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言基础学习笔记（1）：变量、算术运算与赋值运算</title>
    <link href="https://g-ss-hacker.github.io/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89%EF%BC%9A%E5%8F%98%E9%87%8F%E3%80%81%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E4%B8%8E%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97/"/>
    <id>https://g-ss-hacker.github.io/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89%EF%BC%9A%E5%8F%98%E9%87%8F%E3%80%81%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E4%B8%8E%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97/</id>
    <published>2020-02-07T08:43:47.000Z</published>
    <updated>2020-02-16T07:20:33.176Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.ax1x.com/2020/02/07/1gDzsH.png" alt></p><h1 id="C语言基础学习笔记（1）：变量、算术运算与赋值运算"><a href="#C语言基础学习笔记（1）：变量、算术运算与赋值运算" class="headerlink" title="C语言基础学习笔记（1）：变量、算术运算与赋值运算"></a>C语言基础学习笔记（1）：变量、算术运算与赋值运算</h1><blockquote><p>图：西安城墙</p></blockquote><p></p><p><font color="grey"> <em>Guderian出品</em> </font></p><p></p><ol><li><p><code>C</code>中取余运算的结果符号与被除数符号相同。</p></li><li><p><code>C</code>中数字后面带个<code>U</code>， <code>u</code>, <code>L</code>, <code>l</code>, <code>F</code>,<code>f</code>的含义：</p><p><code>U</code>和<code>u</code>表示该数值是<strong>无符号整型</strong>（<code>unsigned int</code>）；<code>L</code>和<code>l</code>表示该数值是<strong>长整型</strong>（<code>long</code>）；<code>F</code>和<code>f</code>表示该数值是<strong>浮点型</strong>（<code>float</code>）。</p></li><li><p><code>C</code>中数字后面带个<code>H</code>, <code>h</code>, <code>B</code>, <code>b</code>或数字前面带个<code>0</code>, <code>0x</code>的含义：</p><p><code>H</code>和<code>h</code>表示该数值是<strong>十六进制数</strong>；<code>B</code>和<code>b</code>表示该数值是<strong>二进制数</strong>；前面带<code>0</code>表示该数值是<strong>八进制数</strong>；前面带<code>0x</code>表示该数值是<strong>十六进制数</strong>。</p></li><li><p><code>C</code>标准常用数学函数：</p><p><img src="https://i.loli.net/2020/02/05/1qDpHvlmyeo8dE7.png" alt></p></li><li><p><code>C</code>中的多重赋值表达式：<strong>变量1 = 变量2 = 表达式</strong>。如<code>a = b = 3</code>，两个赋值运算符的优先级相同，在优先级相同的情况下考虑赋值表达式的结合性，赋值运算符的结合性是右结合的，即从右往左进行计算，即先执行右边的赋值运算<code>b = 3</code>，再执行<code>a = (b = 3)</code>。</p></li><li><code>C</code>的算术表达式中不同类型数据的运算结果的类型是<strong>取值范围较大</strong>的那种类型。<code>C</code>编译器将所有操作数都转换成取值范围较大的操作数的类型，这一过程称为<strong>类型提升（Type Promotion）</strong>。其规则如下：</li></ol><p><img src="https://i.loli.net/2020/02/06/VSHPOLQfYxlgZ5G.png" alt></p><a id="more"></a><hr><font color="#407600">【更多C语言系列】</font><ul><li><p><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/C和C-基本数据类型取值范围/">C &amp; C++基本数据类型取值范围</a></p></li><li><p><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/C和C-中memset用法/">C &amp; C++ memset</a></p></li><li><p><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/野指针的产生及其危害/">野指针的产生及其危害</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/07/1gDzsH.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;C语言基础学习笔记（1）：变量、算术运算与赋值运算&quot;&gt;&lt;a href=&quot;#C语言基础学习笔记（1）：变量、算术运算与赋值运算&quot; class=&quot;headerlink&quot; title=&quot;C语言基础学习笔记（1）：变量、算术运算与赋值运算&quot;&gt;&lt;/a&gt;C语言基础学习笔记（1）：变量、算术运算与赋值运算&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;图：西安城墙&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;grey&quot;&gt; &lt;em&gt;Guderian出品&lt;/em&gt; &lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;C&lt;/code&gt;中取余运算的结果符号与被除数符号相同。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;C&lt;/code&gt;中数字后面带个&lt;code&gt;U&lt;/code&gt;， &lt;code&gt;u&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt;, &lt;code&gt;F&lt;/code&gt;,&lt;code&gt;f&lt;/code&gt;的含义：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;U&lt;/code&gt;和&lt;code&gt;u&lt;/code&gt;表示该数值是&lt;strong&gt;无符号整型&lt;/strong&gt;（&lt;code&gt;unsigned int&lt;/code&gt;）；&lt;code&gt;L&lt;/code&gt;和&lt;code&gt;l&lt;/code&gt;表示该数值是&lt;strong&gt;长整型&lt;/strong&gt;（&lt;code&gt;long&lt;/code&gt;）；&lt;code&gt;F&lt;/code&gt;和&lt;code&gt;f&lt;/code&gt;表示该数值是&lt;strong&gt;浮点型&lt;/strong&gt;（&lt;code&gt;float&lt;/code&gt;）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;C&lt;/code&gt;中数字后面带个&lt;code&gt;H&lt;/code&gt;, &lt;code&gt;h&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;或数字前面带个&lt;code&gt;0&lt;/code&gt;, &lt;code&gt;0x&lt;/code&gt;的含义：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;H&lt;/code&gt;和&lt;code&gt;h&lt;/code&gt;表示该数值是&lt;strong&gt;十六进制数&lt;/strong&gt;；&lt;code&gt;B&lt;/code&gt;和&lt;code&gt;b&lt;/code&gt;表示该数值是&lt;strong&gt;二进制数&lt;/strong&gt;；前面带&lt;code&gt;0&lt;/code&gt;表示该数值是&lt;strong&gt;八进制数&lt;/strong&gt;；前面带&lt;code&gt;0x&lt;/code&gt;表示该数值是&lt;strong&gt;十六进制数&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;C&lt;/code&gt;标准常用数学函数：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/02/05/1qDpHvlmyeo8dE7.png&quot; alt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;C&lt;/code&gt;中的多重赋值表达式：&lt;strong&gt;变量1 = 变量2 = 表达式&lt;/strong&gt;。如&lt;code&gt;a = b = 3&lt;/code&gt;，两个赋值运算符的优先级相同，在优先级相同的情况下考虑赋值表达式的结合性，赋值运算符的结合性是右结合的，即从右往左进行计算，即先执行右边的赋值运算&lt;code&gt;b = 3&lt;/code&gt;，再执行&lt;code&gt;a = (b = 3)&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C&lt;/code&gt;的算术表达式中不同类型数据的运算结果的类型是&lt;strong&gt;取值范围较大&lt;/strong&gt;的那种类型。&lt;code&gt;C&lt;/code&gt;编译器将所有操作数都转换成取值范围较大的操作数的类型，这一过程称为&lt;strong&gt;类型提升（Type Promotion）&lt;/strong&gt;。其规则如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/02/06/VSHPOLQfYxlgZ5G.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="总结" scheme="https://G-SS-Hacker.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="C" scheme="https://G-SS-Hacker.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>机器学习中的评价指标：F1-score</title>
    <link href="https://g-ss-hacker.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87%EF%BC%9AF1-score/"/>
    <id>https://g-ss-hacker.github.io/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B8%AD%E7%9A%84%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87%EF%BC%9AF1-score/</id>
    <published>2020-02-06T11:12:29.000Z</published>
    <updated>2020-02-07T06:12:29.528Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.pixabay.com/photo/2015/08/01/13/47/seattle-870282_1280.jpg" alt></p><h1 id="机器学习中的评价指标：F1-score"><a href="#机器学习中的评价指标：F1-score" class="headerlink" title="机器学习中的评价指标：F1-score"></a>机器学习中的评价指标：F1-score</h1><blockquote><p>图：西雅图（Seattle）</p></blockquote><p></p><p><font color="grey"> <em>Guderian出品</em> </font></p><p></p><h2 id="回顾：F1-score的计算过程"><a href="#回顾：F1-score的计算过程" class="headerlink" title="回顾：F1-score的计算过程"></a>回顾：F1-score的计算过程</h2><h3 id="混淆矩阵（Confusion-Matrix）"><a href="#混淆矩阵（Confusion-Matrix）" class="headerlink" title="混淆矩阵（Confusion Matrix）"></a>混淆矩阵（Confusion Matrix）</h3><blockquote><p>混淆矩阵也称误差矩阵，是表示精度评价的一种标准格式，用n行n列的矩阵形式来表示。</p></blockquote><p>在机器学习领域，混淆矩阵用于衡量一个分类器的准确程度。对于二分类问题，将其样例根据真实类别和分类器的预测类别的组合划分为真正例$\mathrm{(True \, Positive)}$、假正例$\mathrm{(False \, Positive)}$、真反例$\mathrm{(True \, Negative)}$、假反例$\mathrm{(False \, Negative)}$四种情形。</p><p>对应混淆矩阵$\mathrm{(Confusion \, Matrix)}$如下表：</p><p><style type="text/css"><br>.tg  {border-collapse:collapse;border-spacing:0;}<br>.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;}<br>.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;}<br>.tg .tg-0lax{text-align:left;vertical-align:top}<br>.tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}</style></p><table class="tg">  <tr>    <th class="tg-0lax" rowspan="2"><center>真实情况</center></th>    <th class="tg-0lax" colspan="2"><center>预测结果</center></th>  </tr>  <tr>    <td class="tg-0lax"><center>真</center></td>    <td class="tg-0lax"><center>假</center></td>  </tr>  <tr>    <td class="tg-0lax"><center>真</center></td>    <td class="tg-0lax"><center>TP（真正例）</center></td>    <td class="tg-0lax"><center>FN（假反例）</center></td>  </tr>  <tr>    <td class="tg-0pky"><center>假</center></td>    <td class="tg-0pky"><center>FP（假正例）</center></td>    <td class="tg-0lax"><center>TN（真反例）</center></td>  </tr></table><h3 id="精确率（Precision）与召回率（Recall）"><a href="#精确率（Precision）与召回率（Recall）" class="headerlink" title="精确率（Precision）与召回率（Recall）"></a>精确率（Precision）与召回率（Recall）</h3><p>根据混淆矩阵，我们可以得到如下定义：</p><ul><li><strong>精确率</strong>$\mathrm{(Precision)}$   <font size="4rem">$\mathrm{P=\frac{TP}{TP+FP} \times 100\%}$</font>，表示<strong>真实情况和预测结果皆为真/预测结果为真</strong></li><li><strong>召回率</strong>$\mathrm{(Recall)}$   <font size="4rem">$\mathrm{R=\frac{TP}{TP+FN} \times 100 \%}$</font>，表示<strong>真实情况和预测结果皆为真/真实情况为真</strong></li></ul><h3 id="F1分数（F1-score）"><a href="#F1分数（F1-score）" class="headerlink" title="F1分数（F1-score）"></a>F1分数（F1-score）</h3><blockquote><p>F1分数（$\mathrm{F1-score}$）即精确率与召回率的调和平均数（$\mathrm{Harmonic \, Mean}$），比算术平均数（$\mathrm{Arithmetic \, Mean}$）的评价效果更好。</p></blockquote><font size="5rem">$\mathrm{F1=\frac{2}{\frac1{P}+\frac1{R}}=\frac{2PR}{P+R}}$</font><a id="more"></a><h2 id="直观理解为什么F1-score能评价模型优劣"><a href="#直观理解为什么F1-score能评价模型优劣" class="headerlink" title="直观理解为什么F1-score能评价模型优劣"></a>直观理解为什么F1-score能评价模型优劣</h2><p>在你训练的机器学习模型过程中，你往往希望能够兼顾<strong>精确率</strong>和<strong>召回率</strong>，并使用一个统一的<strong>单值评价指标来评价</strong>你的机器学习模型的训练效果。我们之所以使用<strong>调和平均</strong>而不是<strong>算术平均</strong>，是因为在<strong>算术平均</strong>中，任何一方对数值增长的贡献相当，任何一方对数值下降的责任也相当；而<strong>调和平均</strong>在增长的时候会偏袒较小值，也会惩罚<strong>精确率</strong>和<strong>召回率</strong>相差巨大的极端情况，很好地兼顾了<strong>精确率</strong>和<strong>召回率</strong>。</p><h3 id="几何观点"><a href="#几何观点" class="headerlink" title="几何观点"></a>几何观点</h3><p><img src="https://i.loli.net/2020/02/06/12cwKpjqIAumLJ6.jpg" alt></p><p>上图为函数图象<font size="5" rem>$z=f(x, y)=\frac{2xy}{x+y}$</font>。显而易见当<font size="4" rem>$x=1$</font>，<font size="4" rem>$y=0$</font>或者<font size="4" rem>$y=1$</font>，<font size="4" rem>$x=0$</font>时，<font size="4" rem>$z=0$</font>，说明<strong>调和平均</strong>惩罚<strong>精确率</strong>和<strong>召回率</strong>相差很大的极端情况。当<font size="4" rem>$x&lt;y$</font>时，梯度<font size="4" rem>$\mathrm{grad} \, z $</font>在<font size="4" rem>$x$</font>方向增长比<font size="4" rem>$y$</font>方向快；当<font size="4" rem>$y&lt;x$</font>时，梯度<font size="4" rem>$\mathrm{grad} \, z$</font>在<font size="4" rem>$y$</font>方向增长比<font size="4" rem>$x$</font>方向快，即<strong>调和平均</strong>在增长的时候会偏袒较小值。</p><h3 id="代数观点"><a href="#代数观点" class="headerlink" title="代数观点"></a>代数观点</h3><p>对函数<font size="5" rem>$f(x, y)=\frac{2xy}{x+y}$</font>，其图象关于平面<font size="4" rem>$x=y$</font>对称。分别求<font size="4rem">$f(x,y)$</font>对<font size="4rem">$x$</font>和<font size="4rem">$y$</font>的偏导数：</p><p>​     <font size="5" rem>$\frac{\partial f(x,y)}{\partial x}=\frac{2y^2}{(x+y)^2}$</font></p><p>​     <font size="5" rem>$\frac{\partial f(x,y)}{\partial y}=\frac{2x^2}{(x+y)^2}$</font></p><p>当<font size="4" rem>$x&lt;y$</font>时，<font size="5" rem>$\frac{\partial f(x,y)}{\partial x}&gt;\frac{\partial f(x,y)}{\partial y}$</font>，梯度<font size="4" rem>$\mathrm{grad} \, z $</font>在<font size="4" rem>$x$</font>方向增长比<font size="4" rem>$y$</font>方向快；</p><p>当<font size="4" rem>$y&lt;x$</font>时，<font size="5" rem>$\frac{\partial f(x,y)}{\partial y}&gt;\frac{\partial f(x,y)}{\partial x}$</font>，梯度<font size="4" rem>$\mathrm{grad} \, z$</font>在<font size="4" rem>$y$</font>方向增长比<font size="4" rem>$x$</font>方向快，即<strong>调和平均</strong>在增长的时候会偏袒较小值。</p><p>可以看出，<font size="4" rem>$\mathrm{F1-score}$</font>是一种综合的评价指标,它要求总体高指标必须建立在同时满足高<strong>精确率</strong>和高<strong>召回率</strong>的情况之上。使得我们可以更方便快速地对不同模型进行比较，从而选择最优的那个模型。</p><hr><blockquote><p>Reference and lots of thanks：<a href="https://blog.csdn.net/otengyue/article/details/89426004" target="_blank" rel="noopener">https://blog.csdn.net/otengyue/article/details/89426004</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn.pixabay.com/photo/2015/08/01/13/47/seattle-870282_1280.jpg&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;机器学习中的评价指标：F1-score&quot;&gt;&lt;a href=&quot;#机器学习中的评价指标：F1-score&quot; class=&quot;headerlink&quot; title=&quot;机器学习中的评价指标：F1-score&quot;&gt;&lt;/a&gt;机器学习中的评价指标：F1-score&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;图：西雅图（Seattle）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;grey&quot;&gt; &lt;em&gt;Guderian出品&lt;/em&gt; &lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;回顾：F1-score的计算过程&quot;&gt;&lt;a href=&quot;#回顾：F1-score的计算过程&quot; class=&quot;headerlink&quot; title=&quot;回顾：F1-score的计算过程&quot;&gt;&lt;/a&gt;回顾：F1-score的计算过程&lt;/h2&gt;&lt;h3 id=&quot;混淆矩阵（Confusion-Matrix）&quot;&gt;&lt;a href=&quot;#混淆矩阵（Confusion-Matrix）&quot; class=&quot;headerlink&quot; title=&quot;混淆矩阵（Confusion Matrix）&quot;&gt;&lt;/a&gt;混淆矩阵（Confusion Matrix）&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;混淆矩阵也称误差矩阵，是表示精度评价的一种标准格式，用n行n列的矩阵形式来表示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在机器学习领域，混淆矩阵用于衡量一个分类器的准确程度。对于二分类问题，将其样例根据真实类别和分类器的预测类别的组合划分为真正例$\mathrm{(True \, Positive)}$、假正例$\mathrm{(False \, Positive)}$、真反例$\mathrm{(True \, Negative)}$、假反例$\mathrm{(False \, Negative)}$四种情形。&lt;/p&gt;
&lt;p&gt;对应混淆矩阵$\mathrm{(Confusion \, Matrix)}$如下表：&lt;/p&gt;
&lt;p&gt;&lt;style type=&quot;text/css&quot;&gt;&lt;br&gt;.tg  {border-collapse:collapse;border-spacing:0;}&lt;br&gt;.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;}&lt;br&gt;.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;}&lt;br&gt;.tg .tg-0lax{text-align:left;vertical-align:top}&lt;br&gt;.tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}
&lt;/style&gt;&lt;/p&gt;
&lt;table class=&quot;tg&quot;&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-0lax&quot; rowspan=&quot;2&quot;&gt;&lt;center&gt;真实情况&lt;/center&gt;&lt;/th&gt;
    &lt;th class=&quot;tg-0lax&quot; colspan=&quot;2&quot;&gt;&lt;center&gt;预测结果&lt;/center&gt;&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0lax&quot;&gt;&lt;center&gt;真&lt;/center&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-0lax&quot;&gt;&lt;center&gt;假&lt;/center&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0lax&quot;&gt;&lt;center&gt;真&lt;/center&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-0lax&quot;&gt;&lt;center&gt;TP（真正例）&lt;/center&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-0lax&quot;&gt;&lt;center&gt;FN（假反例）&lt;/center&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;&lt;center&gt;假&lt;/center&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;&lt;center&gt;FP（假正例）&lt;/center&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-0lax&quot;&gt;&lt;center&gt;TN（真反例）&lt;/center&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&quot;精确率（Precision）与召回率（Recall）&quot;&gt;&lt;a href=&quot;#精确率（Precision）与召回率（Recall）&quot; class=&quot;headerlink&quot; title=&quot;精确率（Precision）与召回率（Recall）&quot;&gt;&lt;/a&gt;精确率（Precision）与召回率（Recall）&lt;/h3&gt;&lt;p&gt;根据混淆矩阵，我们可以得到如下定义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;精确率&lt;/strong&gt;$\mathrm{(Precision)}$   &lt;font size=&quot;4rem&quot;&gt;$\mathrm{P=\frac{TP}{TP+FP} \times 100\%}$&lt;/font&gt;，表示&lt;strong&gt;真实情况和预测结果皆为真/预测结果为真&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;召回率&lt;/strong&gt;$\mathrm{(Recall)}$   &lt;font size=&quot;4rem&quot;&gt;$\mathrm{R=\frac{TP}{TP+FN} \times 100 \%}$&lt;/font&gt;，表示&lt;strong&gt;真实情况和预测结果皆为真/真实情况为真&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;F1分数（F1-score）&quot;&gt;&lt;a href=&quot;#F1分数（F1-score）&quot; class=&quot;headerlink&quot; title=&quot;F1分数（F1-score）&quot;&gt;&lt;/a&gt;F1分数（F1-score）&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;F1分数（$\mathrm{F1-score}$）即精确率与召回率的调和平均数（$\mathrm{Harmonic \, Mean}$），比算术平均数（$\mathrm{Arithmetic \, Mean}$）的评价效果更好。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;font size=&quot;5rem&quot;&gt;$\mathrm{F1=\frac{2}{\frac1{P}+\frac1{R}}=\frac{2PR}{P+R}}$&lt;/font&gt;
    
    </summary>
    
    
      <category term="总结" scheme="https://G-SS-Hacker.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="机器学习" scheme="https://G-SS-Hacker.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="微积分" scheme="https://G-SS-Hacker.github.io/tags/%E5%BE%AE%E7%A7%AF%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>C &amp; C++基本数据类型取值范围</title>
    <link href="https://g-ss-hacker.github.io/C%E5%92%8CC-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4/"/>
    <id>https://g-ss-hacker.github.io/C%E5%92%8CC-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%96%E5%80%BC%E8%8C%83%E5%9B%B4/</id>
    <published>2020-02-05T09:01:37.000Z</published>
    <updated>2020-02-09T06:32:17.706Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images.pexels.com/photos/34609/pexels-photo.jpg?auto=compress&amp;cs=tinysrgb&amp;dpr=2&amp;h=750&amp;w=1260" alt></p><h1 id="C-amp-C-基本数据类型取值范围"><a href="#C-amp-C-基本数据类型取值范围" class="headerlink" title="C &amp; C++基本数据类型取值范围"></a>C &amp; C++基本数据类型取值范围</h1><blockquote><p>图：伦敦（London）</p></blockquote><p></p><p><font color="grey"><em>Guderian</em>出品 </font></p><p></p><p><style type="text/css"><br>.tg  {border-collapse:collapse;border-spacing:0;}<br>.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;}<br>.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;}<br>.tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}</style></p><table class="tg">  <tr>    <th class="tg-0pky" colspan="2">基本数据类型</th>    <th class="tg-0pky">关键字</th>    <th class="tg-0pky">存储大小</th>    <th class="tg-0pky">取数范围</th>  </tr>  <tr>    <td class="tg-0pky">整型</td>    <td class="tg-0pky">基本整型</td>    <td class="tg-0pky">int</td>    <td class="tg-0pky">4字节</td>    <td class="tg-0pky">-2^31 ~ 2^31-1</td>  </tr>  <tr>    <td class="tg-0pky" rowspan="3">实型</td>    <td class="tg-0pky">长整型</td>    <td class="tg-0pky">long</td>    <td class="tg-0pky">4字节</td>    <td class="tg-0pky">-2^31 ~ 2^31-1</td>  </tr>  <tr>    <td class="tg-0pky">短整型</td>    <td class="tg-0pky">short</td>    <td class="tg-0pky">2字节</td>    <td class="tg-0pky">-2^15 ~ 2^15-1</td>  </tr>  <tr>    <td class="tg-0pky">无符号整型</td>    <td class="tg-0pky">unsigned</td>    <td class="tg-0pky">unsigned int 4字节<br>unsigned long 4字节<br>unsigned short 2字节<br></td>    <td class="tg-0pky">unsigned int : 0 ~ 2^32-1<br>unsigned long : 0 ~ 2^32-1<br>unsigned short : 0 ~ 2^16-1<br></td>  </tr>  <tr>    <td class="tg-0pky" rowspan="3">实型</td>    <td class="tg-0pky">单精度实型</td>    <td class="tg-0pky">float</td>    <td class="tg-0pky">4字节</td>    <td class="tg-0pky">1.2E-38 ~ 3.4E+38 精度6~7位有效数字</td>  </tr>  <tr>    <td class="tg-0pky">双精度实型</td>    <td class="tg-0pky">double</td>    <td class="tg-0pky">8字节</td>    <td class="tg-0pky">2.3E-308 ~ 1.7E+308 精度15~16位有效数字</td>  </tr>  <tr>    <td class="tg-0pky">长双精度实型</td>    <td class="tg-0pky">long double</td>    <td class="tg-0pky">16字节</td>    <td class="tg-0pky">3.4E-4932 ~ 1.1E+4932 精度19位有效数字</td>  </tr>  <tr>    <td class="tg-0pky" colspan="2">字符型</td>    <td class="tg-0pky">char</td>    <td class="tg-0pky">1字节</td>    <td class="tg-0pky">0 ~ 2^8-1</td>  </tr>  <tr>    <td class="tg-0pky" colspan="2">枚举类型</td>    <td class="tg-0pky">enum</td>    <td class="tg-0pky"></td>    <td class="tg-0pky"></td>  </tr></table><a id="more"></a><hr><font color="orange"><strong>我们不管遇到多复杂的数据类型都不要怕，我们戴口罩面对它。消除恐惧的最好办法就是面对恐惧！坚持就是胜利！学好C语言！奥利给！</strong></font>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://images.pexels.com/photos/34609/pexels-photo.jpg?auto=compress&amp;amp;cs=tinysrgb&amp;amp;dpr=2&amp;amp;h=750&amp;amp;w=1260&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;C-amp-C-基本数据类型取值范围&quot;&gt;&lt;a href=&quot;#C-amp-C-基本数据类型取值范围&quot; class=&quot;headerlink&quot; title=&quot;C &amp;amp; C++基本数据类型取值范围&quot;&gt;&lt;/a&gt;C &amp;amp; C++基本数据类型取值范围&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;图：伦敦（London）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;grey&quot;&gt;&lt;em&gt;Guderian&lt;/em&gt;出品 &lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;p&gt;&lt;style type=&quot;text/css&quot;&gt;&lt;br&gt;.tg  {border-collapse:collapse;border-spacing:0;}&lt;br&gt;.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;}&lt;br&gt;.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;}&lt;br&gt;.tg .tg-0pky{border-color:inherit;text-align:left;vertical-align:top}
&lt;/style&gt;&lt;/p&gt;
&lt;table class=&quot;tg&quot;&gt;
  &lt;tr&gt;
    &lt;th class=&quot;tg-0pky&quot; colspan=&quot;2&quot;&gt;基本数据类型&lt;/th&gt;
    &lt;th class=&quot;tg-0pky&quot;&gt;关键字&lt;/th&gt;
    &lt;th class=&quot;tg-0pky&quot;&gt;存储大小&lt;/th&gt;
    &lt;th class=&quot;tg-0pky&quot;&gt;取数范围&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;整型&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;基本整型&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;int&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;4字节&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;-2^31 ~ 2^31-1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot; rowspan=&quot;3&quot;&gt;实型&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;长整型&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;long&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;4字节&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;-2^31 ~ 2^31-1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;短整型&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;short&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;2字节&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;-2^15 ~ 2^15-1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;无符号整型&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;unsigned&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;unsigned int 4字节&lt;br&gt;unsigned long 4字节&lt;br&gt;unsigned short 2字节&lt;br&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;unsigned int : 0 ~ 2^32-1&lt;br&gt;unsigned long : 0 ~ 2^32-1&lt;br&gt;unsigned short : 0 ~ 2^16-1&lt;br&gt;&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot; rowspan=&quot;3&quot;&gt;实型&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;单精度实型&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;float&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;4字节&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;1.2E-38 ~ 3.4E+38 精度6~7位有效数字&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;双精度实型&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;double&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;8字节&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;2.3E-308 ~ 1.7E+308 精度15~16位有效数字&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;长双精度实型&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;long double&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;16字节&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;3.4E-4932 ~ 1.1E+4932 精度19位有效数字&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot; colspan=&quot;2&quot;&gt;字符型&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;char&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;1字节&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;0 ~ 2^8-1&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class=&quot;tg-0pky&quot; colspan=&quot;2&quot;&gt;枚举类型&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;enum&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;&lt;/td&gt;
    &lt;td class=&quot;tg-0pky&quot;&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
    
    </summary>
    
    
      <category term="总结" scheme="https://G-SS-Hacker.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="C-plus-plus" scheme="https://G-SS-Hacker.github.io/tags/C-plus-plus/"/>
    
      <category term="C" scheme="https://G-SS-Hacker.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Softmax函数反向传播求导详细过程</title>
    <link href="https://g-ss-hacker.github.io/Softmax%E5%87%BD%E6%95%B0%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E6%B1%82%E5%AF%BC%E8%AF%A6%E7%BB%86%E8%BF%87%E7%A8%8B/"/>
    <id>https://g-ss-hacker.github.io/Softmax%E5%87%BD%E6%95%B0%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E6%B1%82%E5%AF%BC%E8%AF%A6%E7%BB%86%E8%BF%87%E7%A8%8B/</id>
    <published>2020-02-04T14:22:46.000Z</published>
    <updated>2020-02-06T11:14:56.608Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://s2.ax1x.com/2020/02/05/1rU0Fs.png" alt></p><h1 id="Softmax函数反向传播求导详细过程"><a href="#Softmax函数反向传播求导详细过程" class="headerlink" title="Softmax函数反向传播求导详细过程"></a>Softmax函数反向传播求导详细过程</h1><blockquote><p>图：纽约，曼哈顿（Manhattan, New York）</p></blockquote><p></p><p><font color="grey"> <em>Guderian出品</em> </font></p><p></p><h2 id="回顾：Softmax函数正向传播"><a href="#回顾：Softmax函数正向传播" class="headerlink" title="回顾：Softmax函数正向传播"></a>回顾：Softmax函数正向传播</h2><h3 id="第一步：计算Z函数"><a href="#第一步：计算Z函数" class="headerlink" title="第一步：计算Z函数"></a>第一步：计算Z函数</h3><p>对神经网络输出层（即第<font size="4rem">$ L $</font>层）有<font size="4rem">$Z^{[L]}=W^{[L]}a^{[L-1]}+b^{[L]}$</font>，其中<font size="4rem">$a^{[L-1]}$</font>为上一层输出值。</p><h3 id="第二步：计算Softmax函数"><a href="#第二步：计算Softmax函数" class="headerlink" title="第二步：计算Softmax函数"></a>第二步：计算Softmax函数</h3><font size="4rem," face="consolas">for i in range(1, C + 1):</font> <p>​    <font size="5rem">$\quad a_i^{[L]}=\frac{e^{Z_i^{[L]}}}{\sum_{k=1}^C e^{Z_k^{[L]}}}$</font></p><p>其中<font size="4rem">$C$</font>表示要预测的类别数，上式满足<font size="4rem">$\sum_{i=1}^C a_i{[L]}=1$</font>，即输入样本属于各类别的概率和为<font size="4rem">$1$</font>。</p><h3 id="第三步：计算损失函数"><a href="#第三步：计算损失函数" class="headerlink" title="第三步：计算损失函数"></a>第三步：计算损失函数</h3><p>单个样本的损失函数为<font size="4rem">$L(a,y)=-\sum_{i=1}^C y_i\log{a_i}$</font>，其中<font size="4rem">$y$</font>为目标输出。</p><h2 id="求导"><a href="#求导" class="headerlink" title="求导"></a>求导</h2><h3 id="第一步：对Softmax函数求导"><a href="#第一步：对Softmax函数求导" class="headerlink" title="第一步：对Softmax函数求导"></a>第一步：对Softmax函数求导</h3><p>​    对<font size="4rem">$\mathrm{Softmax}$</font>函数求导，即求<font size="5rem">$\frac{\partial a_i}{\partial z_j}$</font>：第<font size="4rem">$\mathrm{i}$</font>项输出对第<font size="4rem">$\mathrm{j}$</font>项输入的偏导数。</p><p>​    <font size="5rem">$\frac{\partial a_i}{\partial z_j}=\frac{\partial\frac{e^{z_i}}{\sum_{k=1}^C e^{z_k}}}{\partial z_j}$</font>（省略<font size="4rem">$[ L ]$</font>标记，默认为第<font size="4rem">$ L $</font>层，下同），分类讨论：</p><p>​    $(1)$当<font size="4rem">$\mathrm{i=j}$</font>时，把<font size="4rem">$a_i$</font>分母中除<font size="4rem">$e^{z_j}$</font>项外视作常量</p><p>​    <font size="5rem">$\frac{\partial a_i}{\partial z_j}=\frac{\partial\frac{e^{z_j}}{\sum_{k=1}^C e^{z_k}}}{\partial z_j}=(\frac{e^{z_j}}{e^{z_j}+\sum_{k\ne j}^C e^{z_k}})^\prime=a_j(1-a_j)$</font></p><p>​    $(2)$当<font size="4rem">$\mathrm{i\ne j}$</font>时，把<font size="4rem">$a_i$</font>分子和分母中除<font size="4rem">$e^{z_j}$</font>项外视作常量</p><p>​    <font size="5rem">$\frac{\partial a_i}{\partial z_j}=\frac{\partial\frac{e^{z_i}}{\sum_{k=1}^C e^{z_k}}}{\partial z_j}=(\frac{e^{z_i}}{e^{z_j}+\sum_{k\ne j}^C e^{z_k}})^\prime=\frac{e^{z_i}e^{z_j}}{\sum_{k=1}^C e^{z_k}}=-a_i a_j$</font></p><a id="more"></a><h3 id="第二步：对损失函数求导"><a href="#第二步：对损失函数求导" class="headerlink" title="第二步：对损失函数求导"></a>第二步：对损失函数求导</h3><p>对损失函数求导，即求<font size="5rem">$\frac{\partial L}{\partial z_j}$</font>：损失函数对第<font size="4rem">$\mathrm{j}$</font>项输入的偏导数。</p><p>​    <font size="4rem">$\because L(a,y)=-\sum_{i=1}^C y_i\log{a_i}$</font> </p><p>​    <font size="5rem">$\therefore \frac{\partial L}{\partial z_j}=-\sum_{i=1}^C y_i\frac{\partial \log a_i}{\partial z_j}=-\sum_{i=1}^C \frac{y_i}{a_i}\frac{\partial a_i}{\partial z_j}$</font></p><p>（把<font size="4rem">$y_i$</font>视作常量，再用链导法则转化为对<font size="4rem">$\mathrm{Softmax}$</font>函数求导）</p><p>分别代入$(1)(2)$得：</p><font size="5rem">$-\sum_{i=1}^C \frac{y_i}{a_i}\frac{\partial a_i}{\partial z_j}=-\frac{y_i}{a_i}\frac{\partial a_i}{\partial z_j} \, -\sum_{i=1,i \ne j}^C \frac{y_i}{a_i}\frac{\partial a_i}{\partial z_j}$</font> <p>​        <font size="1rem"> </font></p><p>​                                <font size="5rem">$\quad =$</font> <font size="5rem">$-\frac{y_j}{a_j}a_j(1-a_j)\,+\sum_{i=1,i \ne j}^C \frac{y_i}{a_i}a_ia_j$</font> </p><p>​                                <font size="5rem">$\quad =$</font> <font size="4rem">$-y_j\, +y_ja_j\, +\sum_{i=1,i \ne j}^C y_ia_j$</font> </p><p>​                                <font size="5rem">$\quad =$</font> <font size="4rem">$-y_j\, +\sum_{i=1}^C y_ia_j$</font> （合并<font size="4rem">$y_ja_j$</font>至<font size="4rem">$\sum_{i=1,i \ne j}^C y_ia_j$</font>中） </p><p>​                                <font size="5rem">$\quad =$</font> <font size="4rem">$-y_i\, +a_j\sum_{i=1}^C y_i$</font> （提出<font size="4rem">$a_j$</font>） </p><p>​                                <font size="5rem">$\quad =$</font> <font size="4rem">$a_j-y_j$</font> </p><p>从上述结果可以看出，<font size="4rem">$\mathrm{Softmax}$</font>回归和<font size="4rem">$\mathrm{Logistic}$</font>回归中损失函数求导后具有相同的形式，这也说明了<font size="4rem">$\mathrm{Softmax}$</font>回归和<font size="4rem">$\mathrm{Logistic}$</font>回归具有相同的本质，<font size="4rem">$\mathrm{Softmax}$</font>回归是<font size="4rem">$\mathrm{Logistic}$</font>的推广。</p><hr><blockquote><p>Reference and lots of thanks：<a href="https://www.cnblogs.com/zhaopAC/p/9539118.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhaopAC/p/9539118.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2020/02/05/1rU0Fs.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;Softmax函数反向传播求导详细过程&quot;&gt;&lt;a href=&quot;#Softmax函数反向传播求导详细过程&quot; class=&quot;headerlink&quot; title=&quot;Softmax函数反向传播求导详细过程&quot;&gt;&lt;/a&gt;Softmax函数反向传播求导详细过程&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;图：纽约，曼哈顿（Manhattan, New York）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;grey&quot;&gt; &lt;em&gt;Guderian出品&lt;/em&gt; &lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;h2 id=&quot;回顾：Softmax函数正向传播&quot;&gt;&lt;a href=&quot;#回顾：Softmax函数正向传播&quot; class=&quot;headerlink&quot; title=&quot;回顾：Softmax函数正向传播&quot;&gt;&lt;/a&gt;回顾：Softmax函数正向传播&lt;/h2&gt;&lt;h3 id=&quot;第一步：计算Z函数&quot;&gt;&lt;a href=&quot;#第一步：计算Z函数&quot; class=&quot;headerlink&quot; title=&quot;第一步：计算Z函数&quot;&gt;&lt;/a&gt;第一步：计算Z函数&lt;/h3&gt;&lt;p&gt;对神经网络输出层（即第&lt;font size=&quot;4rem&quot;&gt;$ L $&lt;/font&gt;层）有&lt;font size=&quot;4rem&quot;&gt;$Z^{[L]}=W^{[L]}a^{[L-1]}+b^{[L]}$&lt;/font&gt;，其中&lt;font size=&quot;4rem&quot;&gt;$a^{[L-1]}$&lt;/font&gt;为上一层输出值。&lt;/p&gt;
&lt;h3 id=&quot;第二步：计算Softmax函数&quot;&gt;&lt;a href=&quot;#第二步：计算Softmax函数&quot; class=&quot;headerlink&quot; title=&quot;第二步：计算Softmax函数&quot;&gt;&lt;/a&gt;第二步：计算Softmax函数&lt;/h3&gt;&lt;font size=&quot;4rem,&quot; face=&quot;consolas&quot;&gt;for i in range(1, C + 1):&lt;/font&gt; 

&lt;p&gt;​    &lt;font size=&quot;5rem&quot;&gt;$\quad a_i^{[L]}=\frac{e^{Z_i^{[L]}}}{\sum_{k=1}^C e^{Z_k^{[L]}}}$&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;font size=&quot;4rem&quot;&gt;$C$&lt;/font&gt;表示要预测的类别数，上式满足&lt;font size=&quot;4rem&quot;&gt;$\sum_{i=1}^C a_i{[L]}=1$&lt;/font&gt;，即输入样本属于各类别的概率和为&lt;font size=&quot;4rem&quot;&gt;$1$&lt;/font&gt;。&lt;/p&gt;
&lt;h3 id=&quot;第三步：计算损失函数&quot;&gt;&lt;a href=&quot;#第三步：计算损失函数&quot; class=&quot;headerlink&quot; title=&quot;第三步：计算损失函数&quot;&gt;&lt;/a&gt;第三步：计算损失函数&lt;/h3&gt;&lt;p&gt;单个样本的损失函数为&lt;font size=&quot;4rem&quot;&gt;$L(a,y)=-\sum_{i=1}^C y_i\log{a_i}$&lt;/font&gt;，其中&lt;font size=&quot;4rem&quot;&gt;$y$&lt;/font&gt;为目标输出。&lt;/p&gt;
&lt;h2 id=&quot;求导&quot;&gt;&lt;a href=&quot;#求导&quot; class=&quot;headerlink&quot; title=&quot;求导&quot;&gt;&lt;/a&gt;求导&lt;/h2&gt;&lt;h3 id=&quot;第一步：对Softmax函数求导&quot;&gt;&lt;a href=&quot;#第一步：对Softmax函数求导&quot; class=&quot;headerlink&quot; title=&quot;第一步：对Softmax函数求导&quot;&gt;&lt;/a&gt;第一步：对Softmax函数求导&lt;/h3&gt;&lt;p&gt;​    对&lt;font size=&quot;4rem&quot;&gt;$\mathrm{Softmax}$&lt;/font&gt;函数求导，即求&lt;font size=&quot;5rem&quot;&gt;$\frac{\partial a_i}{\partial z_j}$&lt;/font&gt;：第&lt;font size=&quot;4rem&quot;&gt;$\mathrm{i}$&lt;/font&gt;项输出对第&lt;font size=&quot;4rem&quot;&gt;$\mathrm{j}$&lt;/font&gt;项输入的偏导数。&lt;/p&gt;
&lt;p&gt;​    &lt;font size=&quot;5rem&quot;&gt;$\frac{\partial a_i}{\partial z_j}=\frac{\partial\frac{e^{z_i}}{\sum_{k=1}^C e^{z_k}}}{\partial z_j}$&lt;/font&gt;（省略&lt;font size=&quot;4rem&quot;&gt;$[ L ]$&lt;/font&gt;标记，默认为第&lt;font size=&quot;4rem&quot;&gt;$ L $&lt;/font&gt;层，下同），分类讨论：&lt;/p&gt;
&lt;p&gt;​    $(1)$当&lt;font size=&quot;4rem&quot;&gt;$\mathrm{i=j}$&lt;/font&gt;时，把&lt;font size=&quot;4rem&quot;&gt;$a_i$&lt;/font&gt;分母中除&lt;font size=&quot;4rem&quot;&gt;$e^{z_j}$&lt;/font&gt;项外视作常量&lt;/p&gt;
&lt;p&gt;​    &lt;font size=&quot;5rem&quot;&gt;$\frac{\partial a_i}{\partial z_j}=\frac{\partial\frac{e^{z_j}}{\sum_{k=1}^C e^{z_k}}}{\partial z_j}=(\frac{e^{z_j}}{e^{z_j}+\sum_{k\ne j}^C e^{z_k}})^\prime=a_j(1-a_j)$&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;​    $(2)$当&lt;font size=&quot;4rem&quot;&gt;$\mathrm{i\ne j}$&lt;/font&gt;时，把&lt;font size=&quot;4rem&quot;&gt;$a_i$&lt;/font&gt;分子和分母中除&lt;font size=&quot;4rem&quot;&gt;$e^{z_j}$&lt;/font&gt;项外视作常量&lt;/p&gt;
&lt;p&gt;​    &lt;font size=&quot;5rem&quot;&gt;$\frac{\partial a_i}{\partial z_j}=\frac{\partial\frac{e^{z_i}}{\sum_{k=1}^C e^{z_k}}}{\partial z_j}=(\frac{e^{z_i}}{e^{z_j}+\sum_{k\ne j}^C e^{z_k}})^\prime=\frac{e^{z_i}e^{z_j}}{\sum_{k=1}^C e^{z_k}}=-a_i a_j$&lt;/font&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="总结" scheme="https://G-SS-Hacker.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="机器学习" scheme="https://G-SS-Hacker.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="神经网络" scheme="https://G-SS-Hacker.github.io/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
      <category term="微积分" scheme="https://G-SS-Hacker.github.io/tags/%E5%BE%AE%E7%A7%AF%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>UML建模工具——状态图</title>
    <link href="https://g-ss-hacker.github.io/UML%E7%8A%B6%E6%80%81%E5%9B%BE/"/>
    <id>https://g-ss-hacker.github.io/UML%E7%8A%B6%E6%80%81%E5%9B%BE/</id>
    <published>2020-02-03T13:56:57.000Z</published>
    <updated>2020-02-11T07:37:58.239Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images.pexels.com/photos/313032/pexels-photo-313032.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=2&amp;h=750&amp;w=1260" alt></p><font color="#407600">【面向对象分析UML建模工具全部文章】</font><ul><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E7%94%A8%E4%BE%8B%E5%9B%BE/">UML建模工具(1)——用例图</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E6%B4%BB%E5%8A%A8%E5%9B%BE/">UML建模工具(2)——活动图</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E7%B1%BB%E5%9B%BE/">UML建模工具(3)——类图</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E9%A1%BA%E5%BA%8F%E5%9B%BE/">UML建模工具(4)——顺序图</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E9%80%9A%E4%BF%A1%E5%9B%BE/">UML建模工具(5)——通信图</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E7%8A%B6%E6%80%81%E5%9B%BE/">UML建模工具(6)——状态图</a></li></ul><h1 id="UML建模工具——状态图"><a href="#UML建模工具——状态图" class="headerlink" title="UML建模工具——状态图"></a>UML建模工具——状态图</h1><blockquote><p>图：马来西亚，吉隆坡（Kapa Lumpur）</p></blockquote><p></p><p><font color="grey"> <em>Guderian出品</em> </font></p><p></p><blockquote><p>状态图(Statechart Diagram)是描述一个实体（对象）基于事件反应的动态行为</p></blockquote><h2 id="完整的状态图例子"><a href="#完整的状态图例子" class="headerlink" title="完整的状态图例子"></a>完整的状态图例子</h2><p><img src="https://i.loli.net/2020/02/03/9ves8PrpAUhfT6E.png" alt></p><a id="more"></a><h2 id="状态图的建模元素"><a href="#状态图的建模元素" class="headerlink" title="状态图的建模元素"></a>状态图的建模元素</h2><h3 id="状态（State）"><a href="#状态（State）" class="headerlink" title="状态（State）"></a>状态（State）</h3><p><img src="https://i.loli.net/2020/02/03/AL8rJ1mUebfPH7Z.png" alt></p><p>状态<strong>亮灯</strong>如上图所示，状态用圆角矩形表示，其中可以包括：</p><ul><li>名称</li><li>进入动作</li><li>退出动作</li><li>内部迁移</li><li>子状态</li></ul><h3 id="事件（Event）"><a href="#事件（Event）" class="headerlink" title="事件（Event）"></a>事件（Event）</h3><blockquote><p> 事件可视作引起一个状态迁移至另一个状态的激励条件</p></blockquote><p>如以上状态图中，事件<strong>会员收货</strong>使得状态<strong>订单发货</strong>迁移至<strong>订单收货</strong>。</p><p>事件必须有意义，只有有意义的事件才会促成状态迁移，无意义的事件对状态不产生影响。</p><h3 id="迁移（Transition）"><a href="#迁移（Transition）" class="headerlink" title="迁移（Transition）"></a>迁移（Transition）</h3><p><img src="https://i.loli.net/2020/02/03/elGnTOKpmiSHhN2.png" alt></p><p>如上图所示，迁移为状态之间的关联，且必须有事件触发器并满足一定触发条件才会产生状态间的迁移。</p><p>迁移由5部分组成：</p><ul><li>源状态</li><li>事件触发器</li><li>触发条件</li><li>效应</li><li>目标状态</li></ul><h2 id="状态图建模注意事项"><a href="#状态图建模注意事项" class="headerlink" title="状态图建模注意事项"></a>状态图建模注意事项</h2><ul><li>一个状态必须与其他状态有关联，不允许孤立存在</li><li>不允许只进不出或只出不进的迁移</li><li>不允许没有事件的迁移</li></ul><hr><blockquote><p>Reference：<a href="https://edu.csdn.net/course/play/24559/273459" target="_blank" rel="noopener">https://edu.csdn.net/course/play/24559/273459</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://images.pexels.com/photos/313032/pexels-photo-313032.jpeg?auto=compress&amp;amp;cs=tinysrgb&amp;amp;dpr=2&amp;amp;h=750&amp;amp;w=1260&quot; alt&gt;&lt;/p&gt;
&lt;font color=&quot;#407600&quot;&gt;【面向对象分析UML建模工具全部文章】&lt;/font&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E7%94%A8%E4%BE%8B%E5%9B%BE/&quot;&gt;UML建模工具(1)——用例图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E6%B4%BB%E5%8A%A8%E5%9B%BE/&quot;&gt;UML建模工具(2)——活动图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E7%B1%BB%E5%9B%BE/&quot;&gt;UML建模工具(3)——类图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E9%A1%BA%E5%BA%8F%E5%9B%BE/&quot;&gt;UML建模工具(4)——顺序图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E9%80%9A%E4%BF%A1%E5%9B%BE/&quot;&gt;UML建模工具(5)——通信图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E7%8A%B6%E6%80%81%E5%9B%BE/&quot;&gt;UML建模工具(6)——状态图&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;UML建模工具——状态图&quot;&gt;&lt;a href=&quot;#UML建模工具——状态图&quot; class=&quot;headerlink&quot; title=&quot;UML建模工具——状态图&quot;&gt;&lt;/a&gt;UML建模工具——状态图&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;图：马来西亚，吉隆坡（Kapa Lumpur）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;grey&quot;&gt; &lt;em&gt;Guderian出品&lt;/em&gt; &lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;状态图(Statechart Diagram)是描述一个实体（对象）基于事件反应的动态行为&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;完整的状态图例子&quot;&gt;&lt;a href=&quot;#完整的状态图例子&quot; class=&quot;headerlink&quot; title=&quot;完整的状态图例子&quot;&gt;&lt;/a&gt;完整的状态图例子&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/02/03/9ves8PrpAUhfT6E.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="总结" scheme="https://G-SS-Hacker.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="面向对象" scheme="https://G-SS-Hacker.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="软件工程" scheme="https://G-SS-Hacker.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="UML" scheme="https://G-SS-Hacker.github.io/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>UML建模工具——通信图</title>
    <link href="https://g-ss-hacker.github.io/UML%E9%80%9A%E4%BF%A1%E5%9B%BE/"/>
    <id>https://g-ss-hacker.github.io/UML%E9%80%9A%E4%BF%A1%E5%9B%BE/</id>
    <published>2020-02-02T00:40:00.000Z</published>
    <updated>2020-02-11T07:37:53.075Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images.pexels.com/photos/417054/pexels-photo-417054.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=2&amp;w=500" alt></p><font color="#407600">【面向对象分析UML建模工具全部文章】</font><ul><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E7%94%A8%E4%BE%8B%E5%9B%BE/">UML建模工具(1)——用例图</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E6%B4%BB%E5%8A%A8%E5%9B%BE/">UML建模工具(2)——活动图</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E7%B1%BB%E5%9B%BE/">UML建模工具(3)——类图</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E9%A1%BA%E5%BA%8F%E5%9B%BE/">UML建模工具(4)——顺序图</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E9%80%9A%E4%BF%A1%E5%9B%BE/">UML建模工具(5)——通信图</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E7%8A%B6%E6%80%81%E5%9B%BE/">UML建模工具(6)——状态图</a></li></ul><h1 id="UML建模工具——通信图"><a href="#UML建模工具——通信图" class="headerlink" title="UML建模工具——通信图"></a>UML建模工具——通信图</h1><blockquote><p>图：旧金山湾，黑夜中的金门大桥（Golden Gate Bridge）</p></blockquote><p></p><p><font color="grey"> <em>Guderian出品</em> </font></p><p></p><blockquote><p>通信图（Communication diagram）和顺序图都属于UML交互图，与顺序图本质上是一样的，可以互换</p><p>但二者建模的角度不同<sup><a href="#fn_ 1" id="reffn_ 1"> 1</a></sup></p><ul><li><font color="red">通信图 强调随着时间的推移，各对象是如何交互的</font></li><li><font color="red">通信图 强调对象之间的结构关系</font></li></ul></blockquote><h2 id="通信图的组成元素"><a href="#通信图的组成元素" class="headerlink" title="通信图的组成元素"></a>通信图的组成元素</h2><ul><li>对象（object）</li><li>链接（link）</li></ul><blockquote><p>注意虽然链接和关联的图形都是一条实线，但是此处的链接是对象之间的关系，而关联是类之间的关系</p></blockquote><ul><li>消息（message）</li></ul><a id="more"></a><h2 id="完整的通信图例子"><a href="#完整的通信图例子" class="headerlink" title="完整的通信图例子"></a>完整的通信图例子</h2><p><img src="https://i.loli.net/2020/02/01/gc7X8V9qkzBKDEL.png" alt></p><ol><li><p>技术员张三创建了一个工具</p></li><li><p>技术员张三使用了这个工具</p><p>2.1 工具检查了A103号锅炉</p><p>2.2 工具维修了A103号锅炉</p></li><li><p>技术员张三销毁了这个工具</p></li></ol><hr><blockquote><blockquote id="fn_ 1"><sup> 1</sup>. <a href="http://coursehome.zhihuishu.com/courseHome/2049439#teachTeam" target="_blank" rel="noopener">http://coursehome.zhihuishu.com/courseHome/2049439#teachTeam</a><a href="#reffn_ 1" title="Jump back to footnote [ 1] in the text."> &#8617;</a></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://images.pexels.com/photos/417054/pexels-photo-417054.jpeg?auto=compress&amp;amp;cs=tinysrgb&amp;amp;dpr=2&amp;amp;w=500&quot; alt&gt;&lt;/p&gt;
&lt;font color=&quot;#407600&quot;&gt;【面向对象分析UML建模工具全部文章】&lt;/font&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E7%94%A8%E4%BE%8B%E5%9B%BE/&quot;&gt;UML建模工具(1)——用例图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E6%B4%BB%E5%8A%A8%E5%9B%BE/&quot;&gt;UML建模工具(2)——活动图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E7%B1%BB%E5%9B%BE/&quot;&gt;UML建模工具(3)——类图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E9%A1%BA%E5%BA%8F%E5%9B%BE/&quot;&gt;UML建模工具(4)——顺序图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E9%80%9A%E4%BF%A1%E5%9B%BE/&quot;&gt;UML建模工具(5)——通信图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E7%8A%B6%E6%80%81%E5%9B%BE/&quot;&gt;UML建模工具(6)——状态图&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;UML建模工具——通信图&quot;&gt;&lt;a href=&quot;#UML建模工具——通信图&quot; class=&quot;headerlink&quot; title=&quot;UML建模工具——通信图&quot;&gt;&lt;/a&gt;UML建模工具——通信图&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;图：旧金山湾，黑夜中的金门大桥（Golden Gate Bridge）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;grey&quot;&gt; &lt;em&gt;Guderian出品&lt;/em&gt; &lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通信图（Communication diagram）和顺序图都属于UML交互图，与顺序图本质上是一样的，可以互换&lt;/p&gt;
&lt;p&gt;但二者建模的角度不同&lt;sup&gt;&lt;a href=&quot;#fn_ 1&quot; id=&quot;reffn_ 1&quot;&gt; 1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;font color=&quot;red&quot;&gt;通信图 强调随着时间的推移，各对象是如何交互的&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;font color=&quot;red&quot;&gt;通信图 强调对象之间的结构关系&lt;/font&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;通信图的组成元素&quot;&gt;&lt;a href=&quot;#通信图的组成元素&quot; class=&quot;headerlink&quot; title=&quot;通信图的组成元素&quot;&gt;&lt;/a&gt;通信图的组成元素&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;对象（object）&lt;/li&gt;
&lt;li&gt;链接（link）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意虽然链接和关联的图形都是一条实线，但是此处的链接是对象之间的关系，而关联是类之间的关系&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;消息（message）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="总结" scheme="https://G-SS-Hacker.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="面向对象" scheme="https://G-SS-Hacker.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="软件工程" scheme="https://G-SS-Hacker.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="UML" scheme="https://G-SS-Hacker.github.io/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>UML建模工具——顺序图</title>
    <link href="https://g-ss-hacker.github.io/UML%E9%A1%BA%E5%BA%8F%E5%9B%BE/"/>
    <id>https://g-ss-hacker.github.io/UML%E9%A1%BA%E5%BA%8F%E5%9B%BE/</id>
    <published>2020-02-01T02:33:40.000Z</published>
    <updated>2020-02-11T07:37:35.028Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images.pexels.com/photos/208589/pexels-photo-208589.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=2&amp;h=750&amp;w=1260" alt></p><font color="#407600">【面向对象分析UML建模工具全部文章】</font><ul><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E7%94%A8%E4%BE%8B%E5%9B%BE/">UML建模工具(1)——用例图</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E6%B4%BB%E5%8A%A8%E5%9B%BE/">UML建模工具(2)——活动图</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E7%B1%BB%E5%9B%BE/">UML建模工具(3)——类图</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E9%A1%BA%E5%BA%8F%E5%9B%BE/">UML建模工具(4)——顺序图</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E9%80%9A%E4%BF%A1%E5%9B%BE/">UML建模工具(5)——通信图</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E7%8A%B6%E6%80%81%E5%9B%BE/">UML建模工具(6)——状态图</a></li></ul><h1 id="UML建模工具——顺序图"><a href="#UML建模工具——顺序图" class="headerlink" title="UML建模工具——顺序图"></a>UML建模工具——顺序图</h1><blockquote><p>图：旧金山湾区，晚霞下的泛美金字塔（Transamerica Pyramid）</p></blockquote><p></p><p><font color="grey"> <em>Guderian出品</em> </font></p><p></p><blockquote><p>顺序图和通信图都属于UML交互图</p><p>顺序图（Sequence）是场景（Scenario）的图形化表示，描述了以时间顺序组织的<strong>对象</strong>之间的交互活动</p></blockquote><h2 id="完整的UML顺序图例子"><a href="#完整的UML顺序图例子" class="headerlink" title="完整的UML顺序图例子"></a>完整的UML顺序图例子</h2><p><img src="https://i.loli.net/2020/01/31/lanCLPDjYKHqd9t.png" alt></p><h2 id="基本建模元素"><a href="#基本建模元素" class="headerlink" title="基本建模元素"></a>基本建模元素</h2><ul><li>对象</li><li>对象生命线</li><li>控制焦点</li><li>消息：调用消息、返回消息、异步消息、自关联消息</li><li>对象销毁</li><li>结构化控制</li></ul><a id="more"></a><p><img src="https://i.loli.net/2020/01/31/AgkLjs9dYD6HCyn.png" alt></p><p><img src="https://i.loli.net/2020/01/31/UQL236c7RsKi5St.png" alt></p><h2 id="同步消息与异步消息"><a href="#同步消息与异步消息" class="headerlink" title="同步消息与异步消息"></a>同步消息与异步消息</h2><h3 id="同步消息"><a href="#同步消息" class="headerlink" title="同步消息"></a>同步消息</h3><blockquote><p>发送方向接收方发送消息，接收方接收此消息并回复发送方。发送者在收到接收者的回复之前不会发送另一条消息。</p></blockquote><p>如：老师想张三问了一个问题，张三必须当场给予回复，老师才会问下一个同学问题。</p><h3 id="异步消息"><a href="#异步消息" class="headerlink" title="异步消息"></a>异步消息</h3><blockquote><p>发送方向接收方发送消息，发送者在收到接收者的回复之前可以进行其他活动。</p></blockquote><p>如：老师给张三布置了一个问题，让张三课后思考一下如何解决，然后问其他同学问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://images.pexels.com/photos/208589/pexels-photo-208589.jpeg?auto=compress&amp;amp;cs=tinysrgb&amp;amp;dpr=2&amp;amp;h=750&amp;amp;w=1260&quot; alt&gt;&lt;/p&gt;
&lt;font color=&quot;#407600&quot;&gt;【面向对象分析UML建模工具全部文章】&lt;/font&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E7%94%A8%E4%BE%8B%E5%9B%BE/&quot;&gt;UML建模工具(1)——用例图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E6%B4%BB%E5%8A%A8%E5%9B%BE/&quot;&gt;UML建模工具(2)——活动图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E7%B1%BB%E5%9B%BE/&quot;&gt;UML建模工具(3)——类图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E9%A1%BA%E5%BA%8F%E5%9B%BE/&quot;&gt;UML建模工具(4)——顺序图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E9%80%9A%E4%BF%A1%E5%9B%BE/&quot;&gt;UML建模工具(5)——通信图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E7%8A%B6%E6%80%81%E5%9B%BE/&quot;&gt;UML建模工具(6)——状态图&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;UML建模工具——顺序图&quot;&gt;&lt;a href=&quot;#UML建模工具——顺序图&quot; class=&quot;headerlink&quot; title=&quot;UML建模工具——顺序图&quot;&gt;&lt;/a&gt;UML建模工具——顺序图&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;图：旧金山湾区，晚霞下的泛美金字塔（Transamerica Pyramid）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;grey&quot;&gt; &lt;em&gt;Guderian出品&lt;/em&gt; &lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;顺序图和通信图都属于UML交互图&lt;/p&gt;
&lt;p&gt;顺序图（Sequence）是场景（Scenario）的图形化表示，描述了以时间顺序组织的&lt;strong&gt;对象&lt;/strong&gt;之间的交互活动&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;完整的UML顺序图例子&quot;&gt;&lt;a href=&quot;#完整的UML顺序图例子&quot; class=&quot;headerlink&quot; title=&quot;完整的UML顺序图例子&quot;&gt;&lt;/a&gt;完整的UML顺序图例子&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/01/31/lanCLPDjYKHqd9t.png&quot; alt&gt;&lt;/p&gt;
&lt;h2 id=&quot;基本建模元素&quot;&gt;&lt;a href=&quot;#基本建模元素&quot; class=&quot;headerlink&quot; title=&quot;基本建模元素&quot;&gt;&lt;/a&gt;基本建模元素&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;对象&lt;/li&gt;
&lt;li&gt;对象生命线&lt;/li&gt;
&lt;li&gt;控制焦点&lt;/li&gt;
&lt;li&gt;消息：调用消息、返回消息、异步消息、自关联消息&lt;/li&gt;
&lt;li&gt;对象销毁&lt;/li&gt;
&lt;li&gt;结构化控制&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="总结" scheme="https://G-SS-Hacker.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="面向对象" scheme="https://G-SS-Hacker.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="软件工程" scheme="https://G-SS-Hacker.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="UML" scheme="https://G-SS-Hacker.github.io/tags/UML/"/>
    
  </entry>
  
  <entry>
    <title>UML建模工具——类图</title>
    <link href="https://g-ss-hacker.github.io/UML%E7%B1%BB%E5%9B%BE/"/>
    <id>https://g-ss-hacker.github.io/UML%E7%B1%BB%E5%9B%BE/</id>
    <published>2020-01-31T01:58:03.000Z</published>
    <updated>2020-02-11T07:41:57.391Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1580395950609&amp;di=f6e13ac0c889517e41f2d4bbdbf4e3c1&amp;imgtype=0&amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201311%2F02%2F20131102140834_Rnsec.jpeg" alt></p><font color="#407600">【面向对象分析UML建模工具全部文章】</font><ul><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E7%94%A8%E4%BE%8B%E5%9B%BE/">UML建模工具(1)——用例图</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E6%B4%BB%E5%8A%A8%E5%9B%BE/">UML建模工具(2)——活动图</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E7%B1%BB%E5%9B%BE/">UML建模工具(3)——类图</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E9%A1%BA%E5%BA%8F%E5%9B%BE/">UML建模工具(4)——顺序图</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E9%80%9A%E4%BF%A1%E5%9B%BE/">UML建模工具(5)——通信图</a></li><li><a href="https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E7%8A%B6%E6%80%81%E5%9B%BE/">UML建模工具(6)——状态图</a></li></ul><h1 id="UML建模工具——类图"><a href="#UML建模工具——类图" class="headerlink" title="UML建模工具——类图"></a>UML建模工具——类图</h1><blockquote><p>图：巴尔的摩（Baltimore）</p></blockquote><p></p><p><font color="grey"> <em>Guderian出品</em> </font></p><p></p><font color="orange">本文部分内容（已用上标[1]标注）演绎自：https://design-patterns.readthedocs.io/zh_CN/latest/read_uml.html</font><font color="orange">© Copyright 2014, Colin http://blog.me115.com</font><blockquote><p>用例图和活动图用于需求分析，当需求明确之后，则需要用类图进行设计。</p></blockquote><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><h3 id="什么是类（Class）？"><a href="#什么是类（Class）？" class="headerlink" title="什么是类（Class）？"></a>什么是类（Class）？</h3><blockquote><p>具有相同属性、方法的一组对象的描述符</p></blockquote><h3 id="什么是对象（Object）？"><a href="#什么是对象（Object）？" class="headerlink" title="什么是对象（Object）？"></a>什么是对象（Object）？</h3><blockquote><p>对象是类的实例</p></blockquote><h3 id="什么是类图（Class-diagram）？"><a href="#什么是类图（Class-diagram）？" class="headerlink" title="什么是类图（Class diagram）？"></a>什么是类图（Class diagram）？</h3><blockquote><p>把类相关的元素画在一起，即为类图</p></blockquote><font color="grey">（玄之又玄，众妙之门）</font><h2 id="完整的类图例子-1"><a href="#完整的类图例子-1" class="headerlink" title="完整的类图例子 1"></a>完整的类图例子<sup><a href="#fn_ 1" id="reffn_ 1"> 1</a></sup></h2><p><img src="https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_class_struct.jpg" alt></p><ul><li>车的类图结构为<code>&lt;&lt;abstract&gt;&gt;</code>，表示车是一个抽象类；</li><li>它有两个继承类：小汽车和自行车；它们之间的关系为实现关系，使用带空心箭头的虚线表示；</li><li>小汽车为与SUV之间也是继承关系，它们之间的关系为泛化关系，使用带空心箭头的实线表示；</li><li>小汽车与发动机之间是组合关系，使用带实心箭头的实线表示；</li><li>学生与班级之间是聚合关系，使用带空心箭头的实线表示；</li><li>学生与身份证之间为关联关系，使用一根实线表示；</li><li>学生上学需要用到自行车，与自行车是一种依赖关系，使用带箭头的虚线表示；</li></ul><a id="more"></a><h2 id="类图中的元素"><a href="#类图中的元素" class="headerlink" title="类图中的元素"></a>类图中的元素</h2><ul><li>类</li><li>接口</li><li>协作</li><li>类之间的关系</li></ul><div class="table-container"><table><thead><tr><th>关系类型</th><th>说明</th><th>表示符号</th></tr></thead><tbody><tr><td>依赖（Dependency）</td><td>独立事物发生变化会影响依赖事物</td><td><img src="https://i.loli.net/2020/01/30/4Hti1muvxPNZM3p.png" alt></td></tr><tr><td>关联（Association）</td><td>整体与部分关系</td><td><img src="https://i.loli.net/2020/01/29/Kztkm5aJZRAPErp.png" alt></td></tr><tr><td>泛化（Generalization）</td><td>特殊/一般关系</td><td><img src="https://i.loli.net/2020/01/29/fxqJKuU3DnMCVv1.png" alt></td></tr><tr><td>实现（Realization）</td><td>实现表示一个class类实现interface接口（可以是多个）的功能</td><td><img src="https://i.loli.net/2020/01/30/j7b49S3OUmglCYX.png" alt></td></tr><tr><td>聚合（Aggregation）</td><td>A has B，B是A的一部分，但A不控制B的生命周期</td><td><img src="https://s.plantuml.com/sym03.png" alt></td></tr><tr><td>组合（Composition）</td><td>A has B，B是A的一部分，且A控制B的生命周期</td><td><img src="https://s.plantuml.com/sym01.png" alt></td></tr></tbody></table></div><h3 id="依赖（Dependency）-1"><a href="#依赖（Dependency）-1" class="headerlink" title="依赖（Dependency） 1"></a>依赖（Dependency）<sup><a href="#fn_ 1" id="reffn_ 1"> 1</a></sup></h3><p>依赖关系是用一套带箭头的虚线表示的；如下图表示A依赖于B；他描述一个对象在运行期间会用到另一个对象的关系；</p><p><img src="https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_dependency.jpg" alt="_images/uml_dependency.jpg"></p><p>与关联关系不同的是，它是一种临时性的关系，通常在运行期间产生，并且随着运行时的变化； 依赖关系也可能发生变化；</p><p>显然，依赖也有方向，双向依赖是一种非常糟糕的结构，我们总是应该保持单向依赖，杜绝双向依赖的产生；</p><p>注：在最终代码中，依赖关系体现为类构造方法及类方法的传入参数，箭头的指向为调用关系；依赖关系除了临时知道对方外，还是“使用”对方的方法和属性；</p><h3 id="关联（Association）-1"><a href="#关联（Association）-1" class="headerlink" title="关联（Association） 1"></a>关联（Association）<sup><a href="#fn_ 1" id="reffn_ 1"> 1</a></sup></h3><p>关联关系是用一条直线表示的；它描述不同类的对象之间的结构关系；它是一种静态关系， 通常与运行状态无关，一般由常识等因素决定的；它一般用来定义对象之间静态的、天然的结构； 所以，关联关系是一种“强关联”的关系；</p><p>比如，乘车人和车票之间就是一种关联关系；学生和学校就是一种关联关系；</p><p>关联关系默认不强调方向，表示对象间相互知道；如果特别强调方向，如下图，表示A知道B，但 B不知道A；</p><p><img src="https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_association.jpg" alt="_images/uml_association.jpg"></p><p>注：在最终代码中，关联对象通常是以成员变量的形式实现的；</p><h3 id="泛化（Generalization）-1"><a href="#泛化（Generalization）-1" class="headerlink" title="泛化（Generalization） 1"></a>泛化（Generalization）<sup><a href="#fn_ 1" id="reffn_ 1"> 1</a></sup></h3><p>类的继承结构表现在UML中为：泛化(generalize)与实现(realize)：</p><p>继承关系为 is-a的关系；两个对象之间如果可以用 is-a 来表示，就是继承关系：（..是..)</p><p>eg：自行车是车、猫是动物</p><p>泛化关系用一条带空心箭头的直接表示；如下图表示（A继承自B）；</p><p><img src="https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_generalization.jpg" alt="_images/uml_generalization.jpg"></p><p>eg：汽车在现实中有实现，可用汽车定义具体的对象；汽车与SUV之间为泛化关系；</p><p><img src="https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_generalize.jpg" alt="_images/uml_generalize.jpg"></p><p>注：最终代码中，泛化关系表现为继承非抽象类；</p><h3 id="实现（Realization）-1"><a href="#实现（Realization）-1" class="headerlink" title="实现（Realization） 1"></a>实现（Realization）<sup><a href="#fn_ 1" id="reffn_ 1"> 1</a></sup></h3><p>实现关系用一条带空心箭头的虚线表示；</p><p>eg：”车”为一个抽象概念，在现实中并无法直接用来定义对象；只有指明具体的子类(汽车还是自行车)，才 可以用来定义对象（”车”这个类在C++中用抽象类表示，在JAVA中有接口这个概念，更容易理解）</p><p><img src="https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_realize.jpg" alt="_images/uml_realize.jpg"></p><p>注：最终代码中，实现关系表现为继承抽象类；</p><h3 id="聚合（Aggregation）-1"><a href="#聚合（Aggregation）-1" class="headerlink" title="聚合（Aggregation） 1"></a>聚合（Aggregation）<sup><a href="#fn_ 1" id="reffn_ 1"> 1</a></sup></h3><p>聚合关系用一条带空心菱形箭头的直线表示，如下图表示A聚合到B上，或者说B由A组成；</p><p><img src="https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_aggregation.jpg" alt="_images/uml_aggregation.jpg"></p><p>聚合关系用于表示实体对象之间的关系，表示整体由部分构成的语义；例如一个部门由多个员工组成；</p><p>与组合关系不同的是，整体和部分不是强依赖的，即使整体不存在了，部分仍然存在；例如， 部门撤销了，人员不会消失，他们依然存在；</p><h3 id="组合（Composition）-1"><a href="#组合（Composition）-1" class="headerlink" title="组合（Composition） 1"></a>组合（Composition）<sup><a href="#fn_ 1" id="reffn_ 1"> 1</a></sup></h3><p>组合关系用一条带实心菱形箭头直线表示，如下图表示A组成B，或者B由A组成；</p><p><img src="https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_composition.jpg" alt="_images/uml_composition.jpg"></p><p>与聚合关系一样，组合关系同样表示整体由部分构成的语义；比如公司由多个部门组成；</p><p>但组合关系是一种强依赖的特殊聚合关系，如果整体不存在了，则部分也不存在了；例如， 公司不存在了，部门也将不存在了；</p><h2 id="关联关系的修饰"><a href="#关联关系的修饰" class="headerlink" title="关联关系的修饰"></a>关联关系的修饰</h2><h3 id="名称及其方向"><a href="#名称及其方向" class="headerlink" title="名称及其方向"></a>名称及其方向</h3><p><img src="https://i.loli.net/2020/01/30/Sj8GdFpH4zf1gwP.png" alt></p><h3 id="角色及可见性"><a href="#角色及可见性" class="headerlink" title="角色及可见性"></a>角色及可见性</h3><blockquote><p>在关联的每一端，表明相连的类在该关联关系中的作用</p></blockquote><p><img src="https://i.loli.net/2020/01/30/v96Lc3Rtkmq2nw4.png" alt></p><h3 id="多重性（Multiplicity）"><a href="#多重性（Multiplicity）" class="headerlink" title="多重性（Multiplicity）"></a>多重性（Multiplicity）</h3><div class="table-container"><table><thead><tr><th>修饰（Adornment）</th><th>语义（Semantics）</th></tr></thead><tbody><tr><td><code>0..1</code></td><td><code>0</code>or<code>1</code></td></tr><tr><td><code>1</code></td><td>Exactly <code>1</code></td></tr><tr><td><code>0..*</code></td><td><code>0</code> or more</td></tr><tr><td><code>1..*</code></td><td><code>1</code> or more</td></tr><tr><td><code>m..n</code></td><td><code>m</code> to <code>n</code></td></tr><tr><td><code>m..n, p..q</code></td><td><code>m</code> to <code>n</code> or <code>p</code> to <code>q</code></td></tr><tr><td><code>*</code></td><td><code>0</code> or more</td></tr></tbody></table></div><p><img src="https://i.loli.net/2020/02/07/QkcFx2zNuwHagT5.png" alt></p><p>名词说明：</p><ul><li><code>Fighter Jet</code>：战斗机</li><li><code>Pilot</code>：飞行员</li><li><code>Missile</code>：导弹</li><li><code>Engine</code>：发动机</li></ul><p>在图中：</p><ol><li>一架战斗机有一个飞行员</li><li>一架战斗机能携带零或多枚导弹</li><li>一架战斗机有两台发动机</li></ol><hr><blockquote id="fn_ 1"><sup> 1</sup>. Reference and lots of thanks：<a href="https://design-patterns.readthedocs.io/zh_CN/latest/read_uml.html" target="_blank" rel="noopener">https://design-patterns.readthedocs.io/zh_CN/latest/read_uml.html</a><a href="#reffn_ 1" title="Jump back to footnote [ 1] in the text."> &#8617;</a></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1580395950609&amp;amp;di=f6e13ac0c889517e41f2d4bbdbf4e3c1&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201311%2F02%2F20131102140834_Rnsec.jpeg&quot; alt&gt;&lt;/p&gt;
&lt;font color=&quot;#407600&quot;&gt;【面向对象分析UML建模工具全部文章】&lt;/font&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E7%94%A8%E4%BE%8B%E5%9B%BE/&quot;&gt;UML建模工具(1)——用例图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E6%B4%BB%E5%8A%A8%E5%9B%BE/&quot;&gt;UML建模工具(2)——活动图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E7%B1%BB%E5%9B%BE/&quot;&gt;UML建模工具(3)——类图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E9%A1%BA%E5%BA%8F%E5%9B%BE/&quot;&gt;UML建模工具(4)——顺序图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E9%80%9A%E4%BF%A1%E5%9B%BE/&quot;&gt;UML建模工具(5)——通信图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://g-ss-hacker.github.io/G-SS-Hacker.github.io/UML%E7%8A%B6%E6%80%81%E5%9B%BE/&quot;&gt;UML建模工具(6)——状态图&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;UML建模工具——类图&quot;&gt;&lt;a href=&quot;#UML建模工具——类图&quot; class=&quot;headerlink&quot; title=&quot;UML建模工具——类图&quot;&gt;&lt;/a&gt;UML建模工具——类图&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;图：巴尔的摩（Baltimore）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;p&gt;&lt;font color=&quot;grey&quot;&gt; &lt;em&gt;Guderian出品&lt;/em&gt; &lt;/font&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;font color=&quot;orange&quot;&gt;本文部分内容（已用上标[1]标注）演绎自：https://design-patterns.readthedocs.io/zh_CN/latest/read_uml.html&lt;/font&gt;

&lt;font color=&quot;orange&quot;&gt;© Copyright 2014, Colin http://blog.me115.com&lt;/font&gt;

&lt;blockquote&gt;
&lt;p&gt;用例图和活动图用于需求分析，当需求明确之后，则需要用类图进行设计。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;回顾&quot;&gt;&lt;a href=&quot;#回顾&quot; class=&quot;headerlink&quot; title=&quot;回顾&quot;&gt;&lt;/a&gt;回顾&lt;/h2&gt;&lt;h3 id=&quot;什么是类（Class）？&quot;&gt;&lt;a href=&quot;#什么是类（Class）？&quot; class=&quot;headerlink&quot; title=&quot;什么是类（Class）？&quot;&gt;&lt;/a&gt;什么是类（Class）？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;具有相同属性、方法的一组对象的描述符&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;什么是对象（Object）？&quot;&gt;&lt;a href=&quot;#什么是对象（Object）？&quot; class=&quot;headerlink&quot; title=&quot;什么是对象（Object）？&quot;&gt;&lt;/a&gt;什么是对象（Object）？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;对象是类的实例&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;什么是类图（Class-diagram）？&quot;&gt;&lt;a href=&quot;#什么是类图（Class-diagram）？&quot; class=&quot;headerlink&quot; title=&quot;什么是类图（Class diagram）？&quot;&gt;&lt;/a&gt;什么是类图（Class diagram）？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;把类相关的元素画在一起，即为类图&lt;/p&gt;
&lt;/blockquote&gt;
&lt;font color=&quot;grey&quot;&gt;（玄之又玄，众妙之门）&lt;/font&gt;



&lt;h2 id=&quot;完整的类图例子-1&quot;&gt;&lt;a href=&quot;#完整的类图例子-1&quot; class=&quot;headerlink&quot; title=&quot;完整的类图例子 1&quot;&gt;&lt;/a&gt;完整的类图例子&lt;sup&gt;&lt;a href=&quot;#fn_ 1&quot; id=&quot;reffn_ 1&quot;&gt; 1&lt;/a&gt;&lt;/sup&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_class_struct.jpg&quot; alt&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;车的类图结构为&lt;code&gt;&amp;lt;&amp;lt;abstract&amp;gt;&amp;gt;&lt;/code&gt;，表示车是一个抽象类；&lt;/li&gt;
&lt;li&gt;它有两个继承类：小汽车和自行车；它们之间的关系为实现关系，使用带空心箭头的虚线表示；&lt;/li&gt;
&lt;li&gt;小汽车为与SUV之间也是继承关系，它们之间的关系为泛化关系，使用带空心箭头的实线表示；&lt;/li&gt;
&lt;li&gt;小汽车与发动机之间是组合关系，使用带实心箭头的实线表示；&lt;/li&gt;
&lt;li&gt;学生与班级之间是聚合关系，使用带空心箭头的实线表示；&lt;/li&gt;
&lt;li&gt;学生与身份证之间为关联关系，使用一根实线表示；&lt;/li&gt;
&lt;li&gt;学生上学需要用到自行车，与自行车是一种依赖关系，使用带箭头的虚线表示；&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="总结" scheme="https://G-SS-Hacker.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="面向对象" scheme="https://G-SS-Hacker.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="软件工程" scheme="https://G-SS-Hacker.github.io/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
    
      <category term="UML" scheme="https://G-SS-Hacker.github.io/tags/UML/"/>
    
  </entry>
  
</feed>
